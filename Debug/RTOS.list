
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c28  08006c28  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c28  08006c28  00016c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c30  08006c30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df4  20000010  08006c48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e04  08006c48  00021e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc0e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b6  00000000  00000000  0003cc4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00040408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  00041aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a09  00000000  00000000  00042fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a1e  00000000  00000000  0006b9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd6df  00000000  00000000  00084407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181ae6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e70  00000000  00000000  00181b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ad0 	.word	0x08006ad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006ad0 	.word	0x08006ad0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of blinkMutex */
  blinkMutexHandle = osMutexNew(&blinkMutex_attributes);
 80004cc:	4813      	ldr	r0, [pc, #76]	; (800051c <MX_FREERTOS_Init+0x54>)
 80004ce:	f003 f9c0 	bl	8003852 <osMutexNew>
 80004d2:	4603      	mov	r3, r0
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_FREERTOS_Init+0x58>)
 80004d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d8:	4a12      	ldr	r2, [pc, #72]	; (8000524 <MX_FREERTOS_Init+0x5c>)
 80004da:	2100      	movs	r1, #0
 80004dc:	4812      	ldr	r0, [pc, #72]	; (8000528 <MX_FREERTOS_Init+0x60>)
 80004de:	f003 f90b 	bl	80036f8 <osThreadNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a11      	ldr	r2, [pc, #68]	; (800052c <MX_FREERTOS_Init+0x64>)
 80004e6:	6013      	str	r3, [r2, #0]

  /* creation of Blink1Task */
  Blink1TaskHandle = osThreadNew(Blink1, NULL, &Blink1Task_attributes);
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <MX_FREERTOS_Init+0x68>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4811      	ldr	r0, [pc, #68]	; (8000534 <MX_FREERTOS_Init+0x6c>)
 80004ee:	f003 f903 	bl	80036f8 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a10      	ldr	r2, [pc, #64]	; (8000538 <MX_FREERTOS_Init+0x70>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of TriggTask */
  TriggTaskHandle = osThreadNew(Trigg, NULL, &TriggTask_attributes);
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <MX_FREERTOS_Init+0x74>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4810      	ldr	r0, [pc, #64]	; (8000540 <MX_FREERTOS_Init+0x78>)
 80004fe:	f003 f8fb 	bl	80036f8 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <MX_FREERTOS_Init+0x7c>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of UserbuttonTask */
  UserbuttonTaskHandle = osThreadNew(Userbutton, NULL, &UserbuttonTask_attributes);
 8000508:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <MX_FREERTOS_Init+0x80>)
 800050a:	2100      	movs	r1, #0
 800050c:	480f      	ldr	r0, [pc, #60]	; (800054c <MX_FREERTOS_Init+0x84>)
 800050e:	f003 f8f3 	bl	80036f8 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <MX_FREERTOS_Init+0x88>)
 8000516:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	08006bd0 	.word	0x08006bd0
 8000520:	20001ce8 	.word	0x20001ce8
 8000524:	08006b40 	.word	0x08006b40
 8000528:	08000555 	.word	0x08000555
 800052c:	20001cdc 	.word	0x20001cdc
 8000530:	08006b64 	.word	0x08006b64
 8000534:	08000565 	.word	0x08000565
 8000538:	20001ce4 	.word	0x20001ce4
 800053c:	08006b88 	.word	0x08006b88
 8000540:	080005cd 	.word	0x080005cd
 8000544:	20001ce0 	.word	0x20001ce0
 8000548:	08006bac 	.word	0x08006bac
 800054c:	080005f5 	.word	0x080005f5
 8000550:	20001cec 	.word	0x20001cec

08000554 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for(;;)
    {
      osDelay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f003 f95d 	bl	800381c <osDelay>
 8000562:	e7fb      	b.n	800055c <StartDefaultTask+0x8>

08000564 <Blink1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink1 */
void Blink1(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink1 */
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(100);
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8000570:	f004 fdcc 	bl	800510c <xTaskGetTickCount>
 8000574:	4603      	mov	r3, r0
 8000576:	60bb      	str	r3, [r7, #8]

    /* Infinite loop */
    for(;;) {
	osMutexWait(blinkMutexHandle, osWaitForever);
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <Blink1+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000580:	4618      	mov	r0, r3
 8000582:	f003 f9ec 	bl	800395e <osMutexAcquire>
	osMutexRelease(blinkMutexHandle);
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <Blink1+0x64>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fa32 	bl	80039f4 <osMutexRelease>

	if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == 1) {
 8000590:	2120      	movs	r1, #32
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 fda1 	bl	80010dc <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d106      	bne.n	80005ae <Blink1+0x4a>
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fdb0 	bl	800110c <HAL_GPIO_WritePin>
 80005ac:	e005      	b.n	80005ba <Blink1+0x56>
	} else {
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2120      	movs	r1, #32
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f000 fda9 	bl	800110c <HAL_GPIO_WritePin>
	}
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	68f9      	ldr	r1, [r7, #12]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f004 fbdf 	bl	8004d84 <vTaskDelayUntil>
	osMutexWait(blinkMutexHandle, osWaitForever);
 80005c6:	e7d7      	b.n	8000578 <Blink1+0x14>
 80005c8:	20001ce8 	.word	0x20001ce8

080005cc <Trigg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Trigg */
void Trigg(void *argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Trigg */
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(200); //200ms in ticks
 80005d4:	23c8      	movs	r3, #200	; 0xc8
 80005d6:	60fb      	str	r3, [r7, #12]
    // Initialise the xLastWakeTime variable with the current time.
    xLastWakeTime = xTaskGetTickCount();
 80005d8:	f004 fd98 	bl	800510c <xTaskGetTickCount>
 80005dc:	4603      	mov	r3, r0
 80005de:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for(;;) {
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	68f9      	ldr	r1, [r7, #12]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fbcc 	bl	8004d84 <vTaskDelayUntil>
	wait_cycles(10);
 80005ec:	200a      	movs	r0, #10
 80005ee:	f000 f82b 	bl	8000648 <wait_cycles>
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005f2:	e7f5      	b.n	80005e0 <Trigg+0x14>

080005f4 <Userbutton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Userbutton */
void Userbutton(void *argument)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Userbutton */
    TickType_t xLastWakeTime;
    const TickType_t xPeriod = pdMS_TO_TICKS(20);
 80005fc:	2314      	movs	r3, #20
 80005fe:	60fb      	str	r3, [r7, #12]
    // Initialize the xLastWakeTime variable with the current time
    xLastWakeTime = xTaskGetTickCount();
 8000600:	f004 fd84 	bl	800510c <xTaskGetTickCount>
 8000604:	4603      	mov	r3, r0
 8000606:	60bb      	str	r3, [r7, #8]

    /* Infinite loop */
    for(;;) {
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <Userbutton+0x4c>)
 800060e:	f000 fd65 	bl	80010dc <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d106      	bne.n	8000626 <Userbutton+0x32>
	    osMutexWait(blinkMutexHandle, 0);
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <Userbutton+0x50>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f99d 	bl	800395e <osMutexAcquire>
 8000624:	e004      	b.n	8000630 <Userbutton+0x3c>
	} else {
	    osMutexRelease(blinkMutexHandle);
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <Userbutton+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f9e2 	bl	80039f4 <osMutexRelease>
	}
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	68f9      	ldr	r1, [r7, #12]
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fba4 	bl	8004d84 <vTaskDelayUntil>
	if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 800063c:	e7e4      	b.n	8000608 <Userbutton+0x14>
 800063e:	bf00      	nop
 8000640:	48000800 	.word	0x48000800
 8000644:	20001ce8 	.word	0x20001ce8

08000648 <wait_cycles>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void wait_cycles(uint32_t n) {
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    uint32_t l = n/3;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <wait_cycles+0x28>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	085b      	lsrs	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
    asm volatile("0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l));
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3b01      	subs	r3, #1
 8000660:	d1fd      	bne.n	800065e <wait_cycles+0x16>
 8000662:	60fb      	str	r3, [r7, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	aaaaaaab 	.word	0xaaaaaaab

08000674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a24      	ldr	r2, [pc, #144]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f000 fd0b 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_GPIO_Init+0xc8>)
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_GPIO_Init+0xcc>)
 800070c:	f000 fb3c 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000710:	2320      	movs	r3, #32
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f000 fb2d 	bl	8000d88 <HAL_GPIO_Init>

}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	; 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	10210000 	.word	0x10210000
 8000740:	48000800 	.word	0x48000800

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 f9fc 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f80b 	bl	8000766 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff ff90 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000754:	f000 f940 	bl	80009d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000758:	f002 ff84 	bl	8003664 <osKernelInitialize>
  MX_FREERTOS_Init();
 800075c:	f7ff feb4 	bl	80004c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000760:	f002 ffa4 	bl	80036ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x20>

08000766 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b096      	sub	sp, #88	; 0x58
 800076a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2244      	movs	r2, #68	; 0x44
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f006 f9a3 	bl	8006ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000788:	f44f 7000 	mov.w	r0, #512	; 0x200
 800078c:	f000 fce4 	bl	8001158 <HAL_PWREx_ControlVoltageScaling>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000796:	f000 f849 	bl	800082c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	2302      	movs	r3, #2
 800079c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007b4:	230a      	movs	r3, #10
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fd1b 	bl	8001204 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007d4:	f000 f82a 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	2303      	movs	r3, #3
 80007de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2104      	movs	r1, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 f8ed 	bl	80019d0 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007fc:	f000 f816 	bl	800082c <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3758      	adds	r7, #88	; 0x58
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 f9b3 	bl	8000b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40012c00 	.word	0x40012c00

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_MspInit+0x4c>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6613      	str	r3, [r2, #96]	; 0x60
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x4c>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_MspInit+0x4c>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6593      	str	r3, [r2, #88]	; 0x58
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	210f      	movs	r1, #15
 8000872:	f06f 0001 	mvn.w	r0, #1
 8000876:	f000 fa5d 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	2019      	movs	r0, #25
 800089e:	f000 fa49 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008a2:	2019      	movs	r0, #25
 80008a4:	f000 fa62 	bl	8000d6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_InitTick+0x9c>)
 80008aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ac:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <HAL_InitTick+0x9c>)
 80008ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008b2:	6613      	str	r3, [r2, #96]	; 0x60
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_InitTick+0x9c>)
 80008b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fa26 	bl	8001d1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008d0:	f001 fa0e 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 80008d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_InitTick+0xa0>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0c9b      	lsrs	r3, r3, #18
 80008e0:	3b01      	subs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_InitTick+0xa4>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <HAL_InitTick+0xa8>)
 80008e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_InitTick+0xa4>)
 80008ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_InitTick+0xa4>)
 80008f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_InitTick+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_InitTick+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <HAL_InitTick+0xa4>)
 8000906:	f001 ff57 	bl	80027b8 <HAL_TIM_Base_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_InitTick+0xa4>)
 8000912:	f001 ffb3 	bl	800287c <HAL_TIM_Base_Start_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	431bde83 	.word	0x431bde83
 800092c:	20001cf0 	.word	0x20001cf0
 8000930:	40012c00 	.word	0x40012c00

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000966:	f001 fff9 	bl	800295c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20001cf0 	.word	0x20001cf0

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <SystemInit+0x5c>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <SystemInit+0x5c>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <SystemInit+0x60>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <SystemInit+0x60>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <SystemInit+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <SystemInit+0x60>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <SystemInit+0x60>)
 80009a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <SystemInit+0x60>)
 80009ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <SystemInit+0x60>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <SystemInit+0x60>)
 80009b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SystemInit+0x60>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	40021000 	.word	0x40021000

080009d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a1c:	f002 f99e 	bl	8002d5c <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f7ff ff01 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20001d3c 	.word	0x20001d3c
 8000a34:	40004400 	.word	0x40004400

08000a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ac      	sub	sp, #176	; 0xb0
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2288      	movs	r2, #136	; 0x88
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 f831 	bl	8006ac0 <memset>
  if(uartHandle->Instance==USART2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <HAL_UART_MspInit+0xb0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d13b      	bne.n	8000ae0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 f9e3 	bl	8001e40 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a80:	f7ff fed4 	bl	800082c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_UART_MspInit+0xb4>)
 8000a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <HAL_UART_MspInit+0xb4>)
 8000a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_UART_MspInit+0xb4>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_UART_MspInit+0xb4>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_UART_MspInit+0xb4>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_UART_MspInit+0xb4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000acc:	2307      	movs	r3, #7
 8000ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f000 f954 	bl	8000d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	37b0      	adds	r7, #176	; 0xb0
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40021000 	.word	0x40021000

08000af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af4:	f7ff ff3e 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000af8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000afa:	e003      	b.n	8000b04 <LoopCopyDataInit>

08000afc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000afe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b02:	3104      	adds	r1, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b0c:	d3f6      	bcc.n	8000afc <CopyDataInit>
	ldr	r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b10:	e002      	b.n	8000b18 <LoopFillZerobss>

08000b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b14:	f842 3b04 	str.w	r3, [r2], #4

08000b18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <LoopForever+0x16>)
	cmp	r2, r3
 8000b1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b1c:	d3f9      	bcc.n	8000b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f005 ff9d 	bl	8006a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b22:	f7ff fe0f 	bl	8000744 <main>

08000b26 <LoopForever>:

LoopForever:
    b LoopForever
 8000b26:	e7fe      	b.n	8000b26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b28:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b2c:	08006c38 	.word	0x08006c38
	ldr	r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b34:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b38:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b3c:	20001e04 	.word	0x20001e04

08000b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_2_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_Init+0x3c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_Init+0x3c>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	f000 f8df 	bl	8000d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b60:	200f      	movs	r0, #15
 8000b62:	f7ff fe91 	bl	8000888 <HAL_InitTick>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	e001      	b.n	8000b76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b72:	f7ff fe61 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b76:	79fb      	ldrb	r3, [r7, #7]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20001dc0 	.word	0x20001dc0

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20001dc0 	.word	0x20001dc0

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff4c 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d46:	f7ff ff61 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffb1 	bl	8000cb8 <NVIC_EncodePriority>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff80 	bl	8000c64 <__NVIC_SetPriority>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff54 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d96:	e17f      	b.n	8001098 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8171 	beq.w	8001092 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d00b      	beq.n	8000dd0 <HAL_GPIO_Init+0x48>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d007      	beq.n	8000dd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc4:	2b11      	cmp	r3, #17
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b12      	cmp	r3, #18
 8000dce:	d130      	bne.n	8000e32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e06:	2201      	movs	r2, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	f003 0201 	and.w	r2, r3, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d118      	bne.n	8000e70 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	f003 0201 	and.w	r2, r3, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x128>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b12      	cmp	r3, #18
 8000eae:	d123      	bne.n	8000ef8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	6939      	ldr	r1, [r7, #16]
 8000ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80ac 	beq.w	8001092 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <HAL_GPIO_Init+0x330>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	4a5e      	ldr	r2, [pc, #376]	; (80010b8 <HAL_GPIO_Init+0x330>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <HAL_GPIO_Init+0x330>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f52:	4a5a      	ldr	r2, [pc, #360]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f7c:	d025      	beq.n	8000fca <HAL_GPIO_Init+0x242>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <HAL_GPIO_Init+0x338>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d01f      	beq.n	8000fc6 <HAL_GPIO_Init+0x23e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <HAL_GPIO_Init+0x33c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x23a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <HAL_GPIO_Init+0x340>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x236>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_GPIO_Init+0x344>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x232>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <HAL_GPIO_Init+0x348>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x22e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4a      	ldr	r2, [pc, #296]	; (80010d4 <HAL_GPIO_Init+0x34c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x22a>
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e00c      	b.n	8000fcc <HAL_GPIO_Init+0x244>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e00a      	b.n	8000fcc <HAL_GPIO_Init+0x244>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e008      	b.n	8000fcc <HAL_GPIO_Init+0x244>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x244>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x244>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x244>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x244>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	f002 0203 	and.w	r2, r2, #3
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fdc:	4937      	ldr	r1, [pc, #220]	; (80010bc <HAL_GPIO_Init+0x334>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <HAL_GPIO_Init+0x350>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800100e:	4a32      	ldr	r2, [pc, #200]	; (80010d8 <HAL_GPIO_Init+0x350>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001014:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_GPIO_Init+0x350>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <HAL_GPIO_Init+0x350>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <HAL_GPIO_Init+0x350>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_GPIO_Init+0x350>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_GPIO_Init+0x350>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_GPIO_Init+0x350>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f47f ae78 	bne.w	8000d98 <HAL_GPIO_Init+0x10>
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000800 	.word	0x48000800
 80010c8:	48000c00 	.word	0x48000c00
 80010cc:	48001000 	.word	0x48001000
 80010d0:	48001400 	.word	0x48001400
 80010d4:	48001800 	.word	0x48001800
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001128:	e002      	b.n	8001130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_PWREx_GetVoltageRange+0x18>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40007000 	.word	0x40007000

08001158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001166:	d130      	bne.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001174:	d038      	beq.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2232      	movs	r2, #50	; 0x32
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0c9b      	lsrs	r3, r3, #18
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119c:	e002      	b.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b0:	d102      	bne.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f2      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c4:	d110      	bne.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e00f      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d6:	d007      	beq.n	80011e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40007000 	.word	0x40007000
 80011fc:	20000000 	.word	0x20000000
 8001200:	431bde83 	.word	0x431bde83

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e3d4      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001216:	4ba1      	ldr	r3, [pc, #644]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001220:	4b9e      	ldr	r3, [pc, #632]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80e4 	beq.w	8001400 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <HAL_RCC_OscConfig+0x4a>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	f040 808b 	bne.w	800135c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b01      	cmp	r3, #1
 800124a:	f040 8087 	bne.w	800135c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800124e:	4b93      	ldr	r3, [pc, #588]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_RCC_OscConfig+0x62>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e3ac      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1a      	ldr	r2, [r3, #32]
 800126a:	4b8c      	ldr	r3, [pc, #560]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <HAL_RCC_OscConfig+0x7c>
 8001276:	4b89      	ldr	r3, [pc, #548]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800127e:	e005      	b.n	800128c <HAL_RCC_OscConfig+0x88>
 8001280:	4b86      	ldr	r3, [pc, #536]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800128c:	4293      	cmp	r3, r2
 800128e:	d223      	bcs.n	80012d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fd73 	bl	8001d80 <RCC_SetFlashLatencyFromMSIRange>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e38d      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a4:	4b7d      	ldr	r3, [pc, #500]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a7c      	ldr	r2, [pc, #496]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4977      	ldr	r1, [pc, #476]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c2:	4b76      	ldr	r3, [pc, #472]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	4972      	ldr	r1, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]
 80012d6:	e025      	b.n	8001324 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6f      	ldr	r2, [pc, #444]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b6d      	ldr	r3, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	496a      	ldr	r1, [pc, #424]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f6:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4965      	ldr	r1, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fd33 	bl	8001d80 <RCC_SetFlashLatencyFromMSIRange>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e34d      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001324:	f000 fc36 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	495a      	ldr	r1, [pc, #360]	; (80014a0 <HAL_RCC_OscConfig+0x29c>)
 8001336:	5ccb      	ldrb	r3, [r1, r3]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <HAL_RCC_OscConfig+0x2a0>)
 8001342:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x2a4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fa9d 	bl	8000888 <HAL_InitTick>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d052      	beq.n	80013fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	e331      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d032      	beq.n	80013ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001364:	4b4d      	ldr	r3, [pc, #308]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc1c 	bl	8000bac <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001378:	f7ff fc18 	bl	8000bac <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e31a      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a40      	ldr	r2, [pc, #256]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	493b      	ldr	r1, [pc, #236]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	4936      	ldr	r1, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
 80013c8:	e01a      	b.n	8001400 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fbe9 	bl	8000bac <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013de:	f7ff fbe5 	bl	8000bac <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e2e7      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0x1da>
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d074      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x21a>
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b0c      	cmp	r3, #12
 8001416:	d10e      	bne.n	8001436 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d10b      	bne.n	8001436 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d064      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d160      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e2c4      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x24a>
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a15      	ldr	r2, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e01d      	b.n	800148a <HAL_RCC_OscConfig+0x286>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x26e>
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800145e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x298>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x286>
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a09      	ldr	r2, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x298>)
 8001484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01c      	beq.n	80014cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff fb8b 	bl	8000bac <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001498:	e011      	b.n	80014be <HAL_RCC_OscConfig+0x2ba>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	08006be0 	.word	0x08006be0
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fb7e 	bl	8000bac <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e280      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	4baf      	ldr	r3, [pc, #700]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x2a8>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb6e 	bl	8000bac <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb6a 	bl	8000bac <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e26c      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	4ba5      	ldr	r3, [pc, #660]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2d0>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d060      	beq.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b04      	cmp	r3, #4
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x310>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d119      	bne.n	8001542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d116      	bne.n	8001542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001514:	4b99      	ldr	r3, [pc, #612]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x328>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e249      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b93      	ldr	r3, [pc, #588]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	4990      	ldr	r1, [pc, #576]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	e040      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d023      	beq.n	8001592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	4b8c      	ldr	r3, [pc, #560]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a8b      	ldr	r2, [pc, #556]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fb29 	bl	8000bac <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fb25 	bl	8000bac <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e227      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001570:	4b82      	ldr	r3, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b7f      	ldr	r3, [pc, #508]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	497c      	ldr	r1, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	e018      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b7a      	ldr	r3, [pc, #488]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a79      	ldr	r2, [pc, #484]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800159c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fb05 	bl	8000bac <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fb01 	bl	8000bac <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e203      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d03c      	beq.n	800164a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01c      	beq.n	8001612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d8:	4b68      	ldr	r3, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80015da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015de:	4a67      	ldr	r2, [pc, #412]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fae0 	bl	8000bac <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fadc 	bl	8000bac <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1de      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001602:	4b5e      	ldr	r3, [pc, #376]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3ec>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff fac3 	bl	8000bac <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fabf 	bl	8000bac <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1c1      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ef      	bne.n	800162a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80a6 	beq.w	80017a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10d      	bne.n	8001684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	4a43      	ldr	r2, [pc, #268]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800166e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001672:	6593      	str	r3, [r2, #88]	; 0x58
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001680:	2301      	movs	r3, #1
 8001682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d118      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169c:	f7ff fa86 	bl	8000bac <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff fa82 	bl	8000bac <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e184      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_RCC_OscConfig+0x57c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x4d8>
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	4a2a      	ldr	r2, [pc, #168]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016da:	e024      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	d110      	bne.n	8001706 <HAL_RCC_OscConfig+0x502>
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	4a24      	ldr	r2, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	4a20      	ldr	r2, [pc, #128]	; (800177c <HAL_RCC_OscConfig+0x578>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001704:	e00f      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_OscConfig+0x578>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fa3d 	bl	8000bac <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fa39 	bl	8000bac <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e139      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x578>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ed      	beq.n	8001736 <HAL_RCC_OscConfig+0x532>
 800175a:	e01a      	b.n	8001792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff fa26 	bl	8000bac <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001762:	e00f      	b.n	8001784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fa22 	bl	8000bac <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d906      	bls.n	8001784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e122      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001784:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1e8      	bne.n	8001764 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001792:	7ffb      	ldrb	r3, [r7, #31]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	4a8a      	ldr	r2, [pc, #552]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800179e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8108 	beq.w	80019be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	f040 80d0 	bne.w	8001958 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017b8:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d130      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	3b01      	subs	r3, #1
 80017d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d127      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d11f      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017f8:	2a07      	cmp	r2, #7
 80017fa:	bf14      	ite	ne
 80017fc:	2201      	movne	r2, #1
 80017fe:	2200      	moveq	r2, #0
 8001800:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	4293      	cmp	r3, r2
 8001804:	d113      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d109      	bne.n	800182e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d06e      	beq.n	800190c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d069      	beq.n	8001908 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001834:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001840:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b7      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001850:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a5c      	ldr	r2, [pc, #368]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800185a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800185c:	f7ff f9a6 	bl	8000bac <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f9a2 	bl	8000bac <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0a4      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b51      	ldr	r3, [pc, #324]	; (80019cc <HAL_RCC_OscConfig+0x7c8>)
 8001888:	4013      	ands	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001892:	3a01      	subs	r2, #1
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	4311      	orrs	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800189c:	0212      	lsls	r2, r2, #8
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018a4:	0852      	lsrs	r2, r2, #1
 80018a6:	3a01      	subs	r2, #1
 80018a8:	0552      	lsls	r2, r2, #21
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b0:	0852      	lsrs	r2, r2, #1
 80018b2:	3a01      	subs	r2, #1
 80018b4:	0652      	lsls	r2, r2, #25
 80018b6:	4311      	orrs	r1, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018bc:	0912      	lsrs	r2, r2, #4
 80018be:	0452      	lsls	r2, r2, #17
 80018c0:	430a      	orrs	r2, r1
 80018c2:	4941      	ldr	r1, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c8:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d4:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e0:	f7ff f964 	bl	8000bac <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f960 	bl	8000bac <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e062      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001906:	e05a      	b.n	80019be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e059      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d152      	bne.n	80019be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001930:	f7ff f93c 	bl	8000bac <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f938 	bl	8000bac <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e03a      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x734>
 8001956:	e032      	b.n	80019be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d02d      	beq.n	80019ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001968:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 800197c:	f023 0303 	bic.w	r3, r3, #3
 8001980:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 8001988:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff f90b 	bl	8000bac <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff f907 	bl	8000bac <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x7c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x796>
 80019b8:	e001      	b.n	80019be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	f99d808c 	.word	0xf99d808c

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0c8      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4961      	ldr	r1, [pc, #388]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0b0      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d04c      	beq.n	8001aba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d107      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a28:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d121      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e09e      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a40:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d115      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e092      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a58:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e086      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e07e      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 0203 	bic.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	493f      	ldr	r1, [pc, #252]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8a:	f7ff f88f 	bl	8000bac <HAL_GetTick>
 8001a8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a92:	f7ff f88b 	bl	8000bac <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e066      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 020c 	and.w	r2, r3, #12
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d1eb      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d008      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	492c      	ldr	r1, [pc, #176]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d210      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4924      	ldr	r1, [pc, #144]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_ClockConfig+0x1b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e036      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4918      	ldr	r1, [pc, #96]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4910      	ldr	r1, [pc, #64]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b46:	f000 f825 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	490c      	ldr	r1, [pc, #48]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	5ccb      	ldrb	r3, [r1, r3]
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fe8c 	bl	8000888 <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	08006be0 	.word	0x08006be0
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	; 0x24
 8001b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bac:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d121      	bne.n	8001c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d11e      	bne.n	8001c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e005      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d102      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	e004      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c18:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d134      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d003      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0xac>
 8001c38:	e005      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3c:	617b      	str	r3, [r7, #20]
      break;
 8001c3e:	e005      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c40:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c42:	617b      	str	r3, [r7, #20]
      break;
 8001c44:	e002      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	617b      	str	r3, [r7, #20]
      break;
 8001c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	3301      	adds	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	fb02 f203 	mul.w	r2, r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	0e5b      	lsrs	r3, r3, #25
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08006bf8 	.word	0x08006bf8
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	007a1200 	.word	0x007a1200

08001cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cc8:	f7ff fff0 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4904      	ldr	r1, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08006bf0 	.word	0x08006bf0

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cf4:	f7ff ffda 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	0adb      	lsrs	r3, r3, #11
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	4904      	ldr	r1, [pc, #16]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000
 8001d18:	08006bf0 	.word	0x08006bf0

08001d1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	220f      	movs	r2, #15
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_RCC_GetClockConfig+0x5c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_GetClockConfig+0x5c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	08db      	lsrs	r3, r3, #3
 8001d56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_RCC_GetClockConfig+0x60>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0207 	and.w	r2, r3, #7
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40022000 	.word	0x40022000

08001d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d98:	f7ff f9d0 	bl	800113c <HAL_PWREx_GetVoltageRange>
 8001d9c:	6178      	str	r0, [r7, #20]
 8001d9e:	e014      	b.n	8001dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001db8:	f7ff f9c0 	bl	800113c <HAL_PWREx_GetVoltageRange>
 8001dbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd0:	d10b      	bne.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d919      	bls.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2ba0      	cmp	r3, #160	; 0xa0
 8001ddc:	d902      	bls.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	e013      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e010      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	d902      	bls.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001df0:	2303      	movs	r3, #3
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e00a      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b80      	cmp	r3, #128	; 0x80
 8001dfa:	d102      	bne.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	e004      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b70      	cmp	r3, #112	; 0x70
 8001e06:	d101      	bne.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e08:	2301      	movs	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 0207 	bic.w	r2, r3, #7
 8001e14:	4909      	ldr	r1, [pc, #36]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40022000 	.word	0x40022000

08001e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d041      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e64:	d02a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e6a:	d824      	bhi.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e70:	d008      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e76:	d81e      	bhi.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e80:	d010      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e82:	e018      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e84:	4b86      	ldr	r3, [pc, #536]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a85      	ldr	r2, [pc, #532]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e90:	e015      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fabb 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea2:	e00c      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fba6 	bl	80025fc <RCCEx_PLLSAI2_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eb4:	e003      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eba:	e000      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ebe:	7cfb      	ldrb	r3, [r7, #19]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ec4:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed2:	4973      	ldr	r1, [pc, #460]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eda:	e001      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d041      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ef4:	d02a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ef6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001efa:	d824      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f00:	d008      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f06:	d81e      	bhi.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d010      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f12:	e018      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f14:	4b62      	ldr	r3, [pc, #392]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a61      	ldr	r2, [pc, #388]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f20:	e015      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fa73 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f32:	e00c      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3320      	adds	r3, #32
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fb5e 	bl	80025fc <RCCEx_PLLSAI2_Config>
 8001f40:	4603      	mov	r3, r0
 8001f42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f44:	e003      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	74fb      	strb	r3, [r7, #19]
      break;
 8001f4a:	e000      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f54:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f62:	494f      	ldr	r1, [pc, #316]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f6a:	e001      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a0 	beq.w	80020be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa4:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fdf4 	bl	8000bac <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc6:	e009      	b.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc8:	f7fe fdf0 	bl	8000bac <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d902      	bls.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	74fb      	strb	r3, [r7, #19]
        break;
 8001fda:	e005      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d15c      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01f      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	d019      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002018:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d016      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7fe fdaf 	bl	8000bac <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002050:	e00b      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7fe fdab 	bl	8000bac <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d902      	bls.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	74fb      	strb	r3, [r7, #19]
            break;
 8002068:	e006      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ec      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208e:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002096:	e009      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
 800209c:	e006      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ac:	7c7b      	ldrb	r3, [r7, #17]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b9e      	ldr	r3, [pc, #632]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	4a9d      	ldr	r2, [pc, #628]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ca:	4b98      	ldr	r3, [pc, #608]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d0:	f023 0203 	bic.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	4994      	ldr	r1, [pc, #592]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f023 020c 	bic.w	r2, r3, #12
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	498c      	ldr	r1, [pc, #560]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800210e:	4b87      	ldr	r3, [pc, #540]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4983      	ldr	r1, [pc, #524]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002130:	4b7e      	ldr	r3, [pc, #504]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	497b      	ldr	r1, [pc, #492]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002160:	4972      	ldr	r1, [pc, #456]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002174:	4b6d      	ldr	r3, [pc, #436]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	496a      	ldr	r1, [pc, #424]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	4961      	ldr	r1, [pc, #388]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021b8:	4b5c      	ldr	r3, [pc, #368]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	4959      	ldr	r1, [pc, #356]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	4950      	ldr	r1, [pc, #320]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021fc:	4b4b      	ldr	r3, [pc, #300]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	4948      	ldr	r1, [pc, #288]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	493f      	ldr	r1, [pc, #252]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d028      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224e:	4937      	ldr	r1, [pc, #220]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800225e:	d106      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002260:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a31      	ldr	r2, [pc, #196]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800226a:	60d3      	str	r3, [r2, #12]
 800226c:	e011      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002276:	d10c      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f8c8 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d028      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	491f      	ldr	r1, [pc, #124]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022bc:	d106      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c8:	60d3      	str	r3, [r2, #12]
 80022ca:	e011      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	2101      	movs	r1, #1
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 f899 	bl	8002414 <RCCEx_PLLSAI1_Config>
 80022e2:	4603      	mov	r3, r0
 80022e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02b      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800231a:	d109      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a02      	ldr	r2, [pc, #8]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002326:	60d3      	str	r3, [r2, #12]
 8002328:	e014      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002338:	d10c      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	2101      	movs	r1, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f000 f867 	bl	8002414 <RCCEx_PLLSAI1_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d02f      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002360:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236e:	4928      	ldr	r1, [pc, #160]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800237a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800237e:	d10d      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f844 	bl	8002414 <RCCEx_PLLSAI1_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d014      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	74bb      	strb	r3, [r7, #18]
 800239a:	e011      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3320      	adds	r3, #32
 80023aa:	2102      	movs	r1, #2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 f925 	bl	80025fc <RCCEx_PLLSAI2_Config>
 80023b2:	4603      	mov	r3, r0
 80023b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023da:	490d      	ldr	r1, [pc, #52]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fe:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002406:	7cbb      	ldrb	r3, [r7, #18]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002422:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d018      	beq.n	8002460 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d10d      	bne.n	800245a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
       ||
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002446:	4b6c      	ldr	r3, [pc, #432]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
       ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d047      	beq.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e044      	b.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d018      	beq.n	800249a <RCCEx_PLLSAI1_Config+0x86>
 8002468:	2b03      	cmp	r3, #3
 800246a:	d825      	bhi.n	80024b8 <RCCEx_PLLSAI1_Config+0xa4>
 800246c:	2b01      	cmp	r3, #1
 800246e:	d002      	beq.n	8002476 <RCCEx_PLLSAI1_Config+0x62>
 8002470:	2b02      	cmp	r3, #2
 8002472:	d009      	beq.n	8002488 <RCCEx_PLLSAI1_Config+0x74>
 8002474:	e020      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002476:	4b60      	ldr	r3, [pc, #384]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11d      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002486:	e01a      	b.n	80024be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002488:	4b5b      	ldr	r3, [pc, #364]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002498:	e013      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800249a:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024b6:	e006      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e004      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ce:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	430b      	orrs	r3, r1
 80024e4:	4944      	ldr	r1, [pc, #272]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d17d      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7fe fb56 	bl	8000bac <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002502:	e009      	b.n	8002518 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002504:	f7fe fb52 	bl	8000bac <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	73fb      	strb	r3, [r7, #15]
        break;
 8002516:	e005      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002518:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ef      	bne.n	8002504 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d160      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d111      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002530:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6892      	ldr	r2, [r2, #8]
 8002540:	0211      	lsls	r1, r2, #8
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	0912      	lsrs	r2, r2, #4
 8002548:	0452      	lsls	r2, r2, #17
 800254a:	430a      	orrs	r2, r1
 800254c:	492a      	ldr	r1, [pc, #168]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	610b      	str	r3, [r1, #16]
 8002552:	e027      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d112      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002562:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6892      	ldr	r2, [r2, #8]
 800256a:	0211      	lsls	r1, r2, #8
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6912      	ldr	r2, [r2, #16]
 8002570:	0852      	lsrs	r2, r2, #1
 8002572:	3a01      	subs	r2, #1
 8002574:	0552      	lsls	r2, r2, #21
 8002576:	430a      	orrs	r2, r1
 8002578:	491f      	ldr	r1, [pc, #124]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	610b      	str	r3, [r1, #16]
 800257e:	e011      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6892      	ldr	r2, [r2, #8]
 8002590:	0211      	lsls	r1, r2, #8
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6952      	ldr	r2, [r2, #20]
 8002596:	0852      	lsrs	r2, r2, #1
 8002598:	3a01      	subs	r2, #1
 800259a:	0652      	lsls	r2, r2, #25
 800259c:	430a      	orrs	r2, r1
 800259e:	4916      	ldr	r1, [pc, #88]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe fafc 	bl	8000bac <HAL_GetTick>
 80025b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b6:	e009      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b8:	f7fe faf8 	bl	8000bac <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	73fb      	strb	r3, [r7, #15]
          break;
 80025ca:	e005      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000

080025fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800260a:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d10d      	bne.n	8002642 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
       ||
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800262e:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
       ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d047      	beq.n	80026d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e044      	b.n	80026d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d018      	beq.n	8002682 <RCCEx_PLLSAI2_Config+0x86>
 8002650:	2b03      	cmp	r3, #3
 8002652:	d825      	bhi.n	80026a0 <RCCEx_PLLSAI2_Config+0xa4>
 8002654:	2b01      	cmp	r3, #1
 8002656:	d002      	beq.n	800265e <RCCEx_PLLSAI2_Config+0x62>
 8002658:	2b02      	cmp	r3, #2
 800265a:	d009      	beq.n	8002670 <RCCEx_PLLSAI2_Config+0x74>
 800265c:	e020      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800265e:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11d      	bne.n	80026a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266e:	e01a      	b.n	80026a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d116      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e013      	b.n	80026aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800269e:	e006      	b.n	80026ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e004      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a6:	bf00      	nop
 80026a8:	e002      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	430b      	orrs	r3, r1
 80026cc:	4939      	ldr	r1, [pc, #228]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d167      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026d8:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a35      	ldr	r2, [pc, #212]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fa62 	bl	8000bac <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026ea:	e009      	b.n	8002700 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026ec:	f7fe fa5e 	bl	8000bac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d902      	bls.n	8002700 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	73fb      	strb	r3, [r7, #15]
        break;
 80026fe:	e005      	b.n	800270c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ef      	bne.n	80026ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d14a      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d111      	bne.n	800273c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002718:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	0211      	lsls	r1, r2, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	0912      	lsrs	r2, r2, #4
 8002730:	0452      	lsls	r2, r2, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	491f      	ldr	r1, [pc, #124]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	614b      	str	r3, [r1, #20]
 800273a:	e011      	b.n	8002760 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002744:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6892      	ldr	r2, [r2, #8]
 800274c:	0211      	lsls	r1, r2, #8
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6912      	ldr	r2, [r2, #16]
 8002752:	0852      	lsrs	r2, r2, #1
 8002754:	3a01      	subs	r2, #1
 8002756:	0652      	lsls	r2, r2, #25
 8002758:	430a      	orrs	r2, r1
 800275a:	4916      	ldr	r1, [pc, #88]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	4313      	orrs	r3, r2
 800275e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fa1e 	bl	8000bac <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002772:	e009      	b.n	8002788 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002774:	f7fe fa1a 	bl	8000bac <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	73fb      	strb	r3, [r7, #15]
          break;
 8002786:	e005      	b.n	8002794 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	4904      	ldr	r1, [pc, #16]	; (80027b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e049      	b.n	800285e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f841 	bl	8002866 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 f9f8 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e04f      	b.n	8002934 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_TIM_Base_Start_IT+0xc4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01d      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x76>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d018      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x76>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_TIM_Base_Start_IT+0xc8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x76>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_TIM_Base_Start_IT+0xcc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x76>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_TIM_Base_Start_IT+0xd0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x76>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_TIM_Base_Start_IT+0xd4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_TIM_Base_Start_IT+0x76>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_TIM_Base_Start_IT+0xd8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d115      	bne.n	800291e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_TIM_Base_Start_IT+0xdc>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b06      	cmp	r3, #6
 8002902:	d015      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0xb4>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290a:	d011      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291c:	e008      	b.n	8002930 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e000      	b.n	8002932 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002930:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40012c00 	.word	0x40012c00
 8002944:	40000400 	.word	0x40000400
 8002948:	40000800 	.word	0x40000800
 800294c:	40000c00 	.word	0x40000c00
 8002950:	40013400 	.word	0x40013400
 8002954:	40014000 	.word	0x40014000
 8002958:	00010007 	.word	0x00010007

0800295c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b02      	cmp	r3, #2
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0202 	mvn.w	r2, #2
 8002988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f905 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8f7 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f908 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0204 	mvn.w	r2, #4
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8db 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f8cd 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8de 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0208 	mvn.w	r2, #8
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2204      	movs	r2, #4
 8002a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f8b1 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8a3 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8b4 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d122      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d11b      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0210 	mvn.w	r2, #16
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f887 	bl	8002bae <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f879 	bl	8002b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f88a 	bl	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0201 	mvn.w	r2, #1
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fd fe94 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f914 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1a:	d10e      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d107      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f907 	bl	8002d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d10e      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d107      	bne.n	8002b66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f838 	bl	8002bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d10e      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0220 	mvn.w	r2, #32
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8c7 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d00f      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <TIM_Base_SetConfig+0x118>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <TIM_Base_SetConfig+0x11c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3b      	ldr	r2, [pc, #236]	; (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01f      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d01b      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <TIM_Base_SetConfig+0x118>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d017      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2b      	ldr	r2, [pc, #172]	; (8002d08 <TIM_Base_SetConfig+0x11c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00f      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <TIM_Base_SetConfig+0x128>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_Base_SetConfig+0x9a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <TIM_Base_SetConfig+0x130>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <TIM_Base_SetConfig+0x114>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00f      	beq.n	8002ce4 <TIM_Base_SetConfig+0xf8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <TIM_Base_SetConfig+0x124>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_Base_SetConfig+0xf8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <TIM_Base_SetConfig+0x128>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0xf8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0xf8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <TIM_Base_SetConfig+0x130>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40013400 	.word	0x40013400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e040      	b.n	8002df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd fe5a 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f82c 	bl	8002df8 <UART_SetConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 faaa 	bl	800330c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fb31 	bl	8003450 <UART_CheckIdleState>
 8002dee:	4603      	mov	r3, r0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	b5b0      	push	{r4, r5, r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4bad      	ldr	r3, [pc, #692]	; (80030d8 <UART_SetConfig+0x2e0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	69f9      	ldr	r1, [r7, #28]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4aa2      	ldr	r2, [pc, #648]	; (80030dc <UART_SetConfig+0x2e4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a99      	ldr	r2, [pc, #612]	; (80030e0 <UART_SetConfig+0x2e8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d121      	bne.n	8002ec2 <UART_SetConfig+0xca>
 8002e7e:	4b99      	ldr	r3, [pc, #612]	; (80030e4 <UART_SetConfig+0x2ec>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d817      	bhi.n	8002ebc <UART_SetConfig+0xc4>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x9c>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eb1 	.word	0x08002eb1
 8002e9c:	08002eab 	.word	0x08002eab
 8002ea0:	08002eb7 	.word	0x08002eb7
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	76fb      	strb	r3, [r7, #27]
 8002ea8:	e0e7      	b.n	800307a <UART_SetConfig+0x282>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	76fb      	strb	r3, [r7, #27]
 8002eae:	e0e4      	b.n	800307a <UART_SetConfig+0x282>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	76fb      	strb	r3, [r7, #27]
 8002eb4:	e0e1      	b.n	800307a <UART_SetConfig+0x282>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	76fb      	strb	r3, [r7, #27]
 8002eba:	e0de      	b.n	800307a <UART_SetConfig+0x282>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	76fb      	strb	r3, [r7, #27]
 8002ec0:	e0db      	b.n	800307a <UART_SetConfig+0x282>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a88      	ldr	r2, [pc, #544]	; (80030e8 <UART_SetConfig+0x2f0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d132      	bne.n	8002f32 <UART_SetConfig+0x13a>
 8002ecc:	4b85      	ldr	r3, [pc, #532]	; (80030e4 <UART_SetConfig+0x2ec>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d828      	bhi.n	8002f2c <UART_SetConfig+0x134>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <UART_SetConfig+0xe8>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	08002f2d 	.word	0x08002f2d
 8002ee8:	08002f2d 	.word	0x08002f2d
 8002eec:	08002f2d 	.word	0x08002f2d
 8002ef0:	08002f21 	.word	0x08002f21
 8002ef4:	08002f2d 	.word	0x08002f2d
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08002f2d 	.word	0x08002f2d
 8002f00:	08002f1b 	.word	0x08002f1b
 8002f04:	08002f2d 	.word	0x08002f2d
 8002f08:	08002f2d 	.word	0x08002f2d
 8002f0c:	08002f2d 	.word	0x08002f2d
 8002f10:	08002f27 	.word	0x08002f27
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e0af      	b.n	800307a <UART_SetConfig+0x282>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e0ac      	b.n	800307a <UART_SetConfig+0x282>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e0a9      	b.n	800307a <UART_SetConfig+0x282>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e0a6      	b.n	800307a <UART_SetConfig+0x282>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e0a3      	b.n	800307a <UART_SetConfig+0x282>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6d      	ldr	r2, [pc, #436]	; (80030ec <UART_SetConfig+0x2f4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x186>
 8002f3c:	4b69      	ldr	r3, [pc, #420]	; (80030e4 <UART_SetConfig+0x2ec>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f46:	2b30      	cmp	r3, #48	; 0x30
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x17a>
 8002f4a:	2b30      	cmp	r3, #48	; 0x30
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x180>
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x16e>
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x180>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x168>
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x174>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x180>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e089      	b.n	800307a <UART_SetConfig+0x282>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e086      	b.n	800307a <UART_SetConfig+0x282>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e083      	b.n	800307a <UART_SetConfig+0x282>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e080      	b.n	800307a <UART_SetConfig+0x282>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e07d      	b.n	800307a <UART_SetConfig+0x282>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5b      	ldr	r2, [pc, #364]	; (80030f0 <UART_SetConfig+0x2f8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d120      	bne.n	8002fca <UART_SetConfig+0x1d2>
 8002f88:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <UART_SetConfig+0x2ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f92:	2bc0      	cmp	r3, #192	; 0xc0
 8002f94:	d013      	beq.n	8002fbe <UART_SetConfig+0x1c6>
 8002f96:	2bc0      	cmp	r3, #192	; 0xc0
 8002f98:	d814      	bhi.n	8002fc4 <UART_SetConfig+0x1cc>
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d009      	beq.n	8002fb2 <UART_SetConfig+0x1ba>
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d810      	bhi.n	8002fc4 <UART_SetConfig+0x1cc>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <UART_SetConfig+0x1b4>
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d006      	beq.n	8002fb8 <UART_SetConfig+0x1c0>
 8002faa:	e00b      	b.n	8002fc4 <UART_SetConfig+0x1cc>
 8002fac:	2300      	movs	r3, #0
 8002fae:	76fb      	strb	r3, [r7, #27]
 8002fb0:	e063      	b.n	800307a <UART_SetConfig+0x282>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	76fb      	strb	r3, [r7, #27]
 8002fb6:	e060      	b.n	800307a <UART_SetConfig+0x282>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	76fb      	strb	r3, [r7, #27]
 8002fbc:	e05d      	b.n	800307a <UART_SetConfig+0x282>
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	76fb      	strb	r3, [r7, #27]
 8002fc2:	e05a      	b.n	800307a <UART_SetConfig+0x282>
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	76fb      	strb	r3, [r7, #27]
 8002fc8:	e057      	b.n	800307a <UART_SetConfig+0x282>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a49      	ldr	r2, [pc, #292]	; (80030f4 <UART_SetConfig+0x2fc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d125      	bne.n	8003020 <UART_SetConfig+0x228>
 8002fd4:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <UART_SetConfig+0x2ec>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe2:	d017      	beq.n	8003014 <UART_SetConfig+0x21c>
 8002fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe8:	d817      	bhi.n	800301a <UART_SetConfig+0x222>
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	d00b      	beq.n	8003008 <UART_SetConfig+0x210>
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff4:	d811      	bhi.n	800301a <UART_SetConfig+0x222>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <UART_SetConfig+0x20a>
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffe:	d006      	beq.n	800300e <UART_SetConfig+0x216>
 8003000:	e00b      	b.n	800301a <UART_SetConfig+0x222>
 8003002:	2300      	movs	r3, #0
 8003004:	76fb      	strb	r3, [r7, #27]
 8003006:	e038      	b.n	800307a <UART_SetConfig+0x282>
 8003008:	2302      	movs	r3, #2
 800300a:	76fb      	strb	r3, [r7, #27]
 800300c:	e035      	b.n	800307a <UART_SetConfig+0x282>
 800300e:	2304      	movs	r3, #4
 8003010:	76fb      	strb	r3, [r7, #27]
 8003012:	e032      	b.n	800307a <UART_SetConfig+0x282>
 8003014:	2308      	movs	r3, #8
 8003016:	76fb      	strb	r3, [r7, #27]
 8003018:	e02f      	b.n	800307a <UART_SetConfig+0x282>
 800301a:	2310      	movs	r3, #16
 800301c:	76fb      	strb	r3, [r7, #27]
 800301e:	e02c      	b.n	800307a <UART_SetConfig+0x282>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <UART_SetConfig+0x2e4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d125      	bne.n	8003076 <UART_SetConfig+0x27e>
 800302a:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <UART_SetConfig+0x2ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003038:	d017      	beq.n	800306a <UART_SetConfig+0x272>
 800303a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800303e:	d817      	bhi.n	8003070 <UART_SetConfig+0x278>
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003044:	d00b      	beq.n	800305e <UART_SetConfig+0x266>
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304a:	d811      	bhi.n	8003070 <UART_SetConfig+0x278>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <UART_SetConfig+0x260>
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	d006      	beq.n	8003064 <UART_SetConfig+0x26c>
 8003056:	e00b      	b.n	8003070 <UART_SetConfig+0x278>
 8003058:	2300      	movs	r3, #0
 800305a:	76fb      	strb	r3, [r7, #27]
 800305c:	e00d      	b.n	800307a <UART_SetConfig+0x282>
 800305e:	2302      	movs	r3, #2
 8003060:	76fb      	strb	r3, [r7, #27]
 8003062:	e00a      	b.n	800307a <UART_SetConfig+0x282>
 8003064:	2304      	movs	r3, #4
 8003066:	76fb      	strb	r3, [r7, #27]
 8003068:	e007      	b.n	800307a <UART_SetConfig+0x282>
 800306a:	2308      	movs	r3, #8
 800306c:	76fb      	strb	r3, [r7, #27]
 800306e:	e004      	b.n	800307a <UART_SetConfig+0x282>
 8003070:	2310      	movs	r3, #16
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	e001      	b.n	800307a <UART_SetConfig+0x282>
 8003076:	2310      	movs	r3, #16
 8003078:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <UART_SetConfig+0x2e4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	f040 8087 	bne.w	8003194 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003086:	7efb      	ldrb	r3, [r7, #27]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d837      	bhi.n	80030fc <UART_SetConfig+0x304>
 800308c:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <UART_SetConfig+0x29c>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030b9 	.word	0x080030b9
 8003098:	080030fd 	.word	0x080030fd
 800309c:	080030c1 	.word	0x080030c1
 80030a0:	080030fd 	.word	0x080030fd
 80030a4:	080030c7 	.word	0x080030c7
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	080030fd 	.word	0x080030fd
 80030b0:	080030fd 	.word	0x080030fd
 80030b4:	080030cf 	.word	0x080030cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7fe fe04 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 80030bc:	6178      	str	r0, [r7, #20]
        break;
 80030be:	e022      	b.n	8003106 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <UART_SetConfig+0x300>)
 80030c2:	617b      	str	r3, [r7, #20]
        break;
 80030c4:	e01f      	b.n	8003106 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c6:	f7fe fd65 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 80030ca:	6178      	str	r0, [r7, #20]
        break;
 80030cc:	e01b      	b.n	8003106 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030d2:	617b      	str	r3, [r7, #20]
        break;
 80030d4:	e017      	b.n	8003106 <UART_SetConfig+0x30e>
 80030d6:	bf00      	nop
 80030d8:	efff69f3 	.word	0xefff69f3
 80030dc:	40008000 	.word	0x40008000
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40004400 	.word	0x40004400
 80030ec:	40004800 	.word	0x40004800
 80030f0:	40004c00 	.word	0x40004c00
 80030f4:	40005000 	.word	0x40005000
 80030f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	76bb      	strb	r3, [r7, #26]
        break;
 8003104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80f1 	beq.w	80032f0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	429a      	cmp	r2, r3
 800311c:	d305      	bcc.n	800312a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	429a      	cmp	r2, r3
 8003128:	d902      	bls.n	8003130 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	76bb      	strb	r3, [r7, #26]
 800312e:	e0df      	b.n	80032f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4618      	mov	r0, r3
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	020b      	lsls	r3, r1, #8
 8003142:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003146:	0202      	lsls	r2, r0, #8
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6849      	ldr	r1, [r1, #4]
 800314c:	0849      	lsrs	r1, r1, #1
 800314e:	4608      	mov	r0, r1
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	1814      	adds	r4, r2, r0
 8003156:	eb43 0501 	adc.w	r5, r3, r1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	461a      	mov	r2, r3
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	4620      	mov	r0, r4
 8003166:	4629      	mov	r1, r5
 8003168:	f7fd f832 	bl	80001d0 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4613      	mov	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317a:	d308      	bcc.n	800318e <UART_SetConfig+0x396>
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003182:	d204      	bcs.n	800318e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	e0b0      	b.n	80032f0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	76bb      	strb	r3, [r7, #26]
 8003192:	e0ad      	b.n	80032f0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319c:	d15c      	bne.n	8003258 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800319e:	7efb      	ldrb	r3, [r7, #27]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d828      	bhi.n	80031f6 <UART_SetConfig+0x3fe>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <UART_SetConfig+0x3b4>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	080031e1 	.word	0x080031e1
 80031b8:	080031f7 	.word	0x080031f7
 80031bc:	080031e7 	.word	0x080031e7
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	080031f7 	.word	0x080031f7
 80031c8:	080031f7 	.word	0x080031f7
 80031cc:	080031ef 	.word	0x080031ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d0:	f7fe fd78 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 80031d4:	6178      	str	r0, [r7, #20]
        break;
 80031d6:	e013      	b.n	8003200 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d8:	f7fe fd8a 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 80031dc:	6178      	str	r0, [r7, #20]
        break;
 80031de:	e00f      	b.n	8003200 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e0:	4b49      	ldr	r3, [pc, #292]	; (8003308 <UART_SetConfig+0x510>)
 80031e2:	617b      	str	r3, [r7, #20]
        break;
 80031e4:	e00c      	b.n	8003200 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e6:	f7fe fcd5 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 80031ea:	6178      	str	r0, [r7, #20]
        break;
 80031ec:	e008      	b.n	8003200 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f2:	617b      	str	r3, [r7, #20]
        break;
 80031f4:	e004      	b.n	8003200 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	76bb      	strb	r3, [r7, #26]
        break;
 80031fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d074      	beq.n	80032f0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005a      	lsls	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	441a      	add	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	b29b      	uxth	r3, r3
 800321c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b0f      	cmp	r3, #15
 8003222:	d916      	bls.n	8003252 <UART_SetConfig+0x45a>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d212      	bcs.n	8003252 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b29a      	uxth	r2, r3
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	4313      	orrs	r3, r2
 8003246:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	89fa      	ldrh	r2, [r7, #14]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e04e      	b.n	80032f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	76bb      	strb	r3, [r7, #26]
 8003256:	e04b      	b.n	80032f0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003258:	7efb      	ldrb	r3, [r7, #27]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d827      	bhi.n	80032ae <UART_SetConfig+0x4b6>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <UART_SetConfig+0x46c>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003289 	.word	0x08003289
 8003268:	08003291 	.word	0x08003291
 800326c:	08003299 	.word	0x08003299
 8003270:	080032af 	.word	0x080032af
 8003274:	0800329f 	.word	0x0800329f
 8003278:	080032af 	.word	0x080032af
 800327c:	080032af 	.word	0x080032af
 8003280:	080032af 	.word	0x080032af
 8003284:	080032a7 	.word	0x080032a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7fe fd1c 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e013      	b.n	80032b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7fe fd2e 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8003294:	6178      	str	r0, [r7, #20]
        break;
 8003296:	e00f      	b.n	80032b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <UART_SetConfig+0x510>)
 800329a:	617b      	str	r3, [r7, #20]
        break;
 800329c:	e00c      	b.n	80032b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329e:	f7fe fc79 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 80032a2:	6178      	str	r0, [r7, #20]
        break;
 80032a4:	e008      	b.n	80032b8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032aa:	617b      	str	r3, [r7, #20]
        break;
 80032ac:	e004      	b.n	80032b8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	76bb      	strb	r3, [r7, #26]
        break;
 80032b6:	bf00      	nop
    }

    if (pclk != 0U)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	085a      	lsrs	r2, r3, #1
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	441a      	add	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	d908      	bls.n	80032ec <UART_SetConfig+0x4f4>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d204      	bcs.n	80032ec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	e001      	b.n	80032f0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bdb0      	pop	{r4, r5, r7, pc}
 8003306:	bf00      	nop
 8003308:	00f42400 	.word	0x00f42400

0800330c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01a      	beq.n	8003422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340a:	d10a      	bne.n	8003422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003460:	f7fd fba4 	bl	8000bac <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b08      	cmp	r3, #8
 8003472:	d10e      	bne.n	8003492 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f82d 	bl	80034e2 <UART_WaitOnFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e023      	b.n	80034da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d10e      	bne.n	80034be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f817 	bl	80034e2 <UART_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e00d      	b.n	80034da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f2:	e05e      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fa:	d05a      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fc:	f7fd fb56 	bl	8000bac <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	429a      	cmp	r2, r3
 800350a:	d302      	bcc.n	8003512 <UART_WaitOnFlagUntilTimeout+0x30>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d11b      	bne.n	800354a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003520:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e043      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d02c      	beq.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003566:	d124      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003570:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003580:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e00f      	b.n	80035d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d091      	beq.n	80034f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <__NVIC_SetPriority>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	db0a      	blt.n	8003606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	490c      	ldr	r1, [pc, #48]	; (8003628 <__NVIC_SetPriority+0x4c>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	440b      	add	r3, r1
 8003600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003604:	e00a      	b.n	800361c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4908      	ldr	r1, [pc, #32]	; (800362c <__NVIC_SetPriority+0x50>)
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3b04      	subs	r3, #4
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	440b      	add	r3, r1
 800361a:	761a      	strb	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	e000e100 	.word	0xe000e100
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <SysTick_Handler+0x1c>)
 8003636:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003638:	f002 f8ae 	bl	8005798 <xTaskGetSchedulerState>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003642:	f002 ff91 	bl	8006568 <xPortSysTickHandler>
  }
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003654:	2100      	movs	r1, #0
 8003656:	f06f 0004 	mvn.w	r0, #4
 800365a:	f7ff ffbf 	bl	80035dc <__NVIC_SetPriority>
#endif
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800366a:	f3ef 8305 	mrs	r3, IPSR
 800366e:	603b      	str	r3, [r7, #0]
  return(result);
 8003670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003676:	f06f 0305 	mvn.w	r3, #5
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e00c      	b.n	8003698 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <osKernelInitialize+0x44>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <osKernelInitialize+0x44>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800368c:	2300      	movs	r3, #0
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	e002      	b.n	8003698 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003698:	687b      	ldr	r3, [r7, #4]
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	2000002c 	.word	0x2000002c

080036ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b2:	f3ef 8305 	mrs	r3, IPSR
 80036b6:	603b      	str	r3, [r7, #0]
  return(result);
 80036b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80036be:	f06f 0305 	mvn.w	r3, #5
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	e010      	b.n	80036e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <osKernelStart+0x48>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d109      	bne.n	80036e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036ce:	f7ff ffbf 	bl	8003650 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <osKernelStart+0x48>)
 80036d4:	2202      	movs	r2, #2
 80036d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036d8:	f001 fc06 	bl	8004ee8 <vTaskStartScheduler>
      stat = osOK;
 80036dc:	2300      	movs	r3, #0
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	e002      	b.n	80036e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	2000002c 	.word	0x2000002c

080036f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08e      	sub	sp, #56	; 0x38
 80036fc:	af04      	add	r7, sp, #16
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003708:	f3ef 8305 	mrs	r3, IPSR
 800370c:	617b      	str	r3, [r7, #20]
  return(result);
 800370e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003710:	2b00      	cmp	r3, #0
 8003712:	d17e      	bne.n	8003812 <osThreadNew+0x11a>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d07b      	beq.n	8003812 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800371e:	2318      	movs	r3, #24
 8003720:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800372a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d045      	beq.n	80037be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <osThreadNew+0x48>
        name = attr->name;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <osThreadNew+0x6e>
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b38      	cmp	r3, #56	; 0x38
 8003758:	d805      	bhi.n	8003766 <osThreadNew+0x6e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <osThreadNew+0x72>
        return (NULL);
 8003766:	2300      	movs	r3, #0
 8003768:	e054      	b.n	8003814 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	089b      	lsrs	r3, r3, #2
 8003778:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00e      	beq.n	80037a0 <osThreadNew+0xa8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b5b      	cmp	r3, #91	; 0x5b
 8003788:	d90a      	bls.n	80037a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <osThreadNew+0xa8>
        mem = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e010      	b.n	80037c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10c      	bne.n	80037c2 <osThreadNew+0xca>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d108      	bne.n	80037c2 <osThreadNew+0xca>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <osThreadNew+0xca>
          mem = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	e001      	b.n	80037c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d110      	bne.n	80037ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037d0:	9202      	str	r2, [sp, #8]
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6a3a      	ldr	r2, [r7, #32]
 80037dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f001 f92e 	bl	8004a40 <xTaskCreateStatic>
 80037e4:	4603      	mov	r3, r0
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	e013      	b.n	8003812 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d110      	bne.n	8003812 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f001 f979 	bl	8004afa <xTaskCreate>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <osThreadNew+0x11a>
            hTask = NULL;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003812:	693b      	ldr	r3, [r7, #16]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3728      	adds	r7, #40	; 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003824:	f3ef 8305 	mrs	r3, IPSR
 8003828:	60bb      	str	r3, [r7, #8]
  return(result);
 800382a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <osDelay+0x1c>
    stat = osErrorISR;
 8003830:	f06f 0305 	mvn.w	r3, #5
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e007      	b.n	8003848 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f001 fb1c 	bl	8004e80 <vTaskDelay>
    }
  }

  return (stat);
 8003848:	68fb      	ldr	r3, [r7, #12]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003852:	b580      	push	{r7, lr}
 8003854:	b088      	sub	sp, #32
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800385e:	f3ef 8305 	mrs	r3, IPSR
 8003862:	60bb      	str	r3, [r7, #8]
  return(result);
 8003864:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003866:	2b00      	cmp	r3, #0
 8003868:	d174      	bne.n	8003954 <osMutexNew+0x102>
    if (attr != NULL) {
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e001      	b.n	800387c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <osMutexNew+0x3a>
      rmtx = 1U;
 8003886:	2301      	movs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e001      	b.n	8003890 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d15c      	bne.n	8003954 <osMutexNew+0x102>
      mem = -1;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800389e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d015      	beq.n	80038d2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <osMutexNew+0x6a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b4f      	cmp	r3, #79	; 0x4f
 80038b4:	d902      	bls.n	80038bc <osMutexNew+0x6a>
          mem = 1;
 80038b6:	2301      	movs	r3, #1
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e00c      	b.n	80038d6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d108      	bne.n	80038d6 <osMutexNew+0x84>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <osMutexNew+0x84>
            mem = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	e001      	b.n	80038d6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d112      	bne.n	8003902 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4619      	mov	r1, r3
 80038e8:	2004      	movs	r0, #4
 80038ea:	f000 fb18 	bl	8003f1e <xQueueCreateMutexStatic>
 80038ee:	61f8      	str	r0, [r7, #28]
 80038f0:	e016      	b.n	8003920 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4619      	mov	r1, r3
 80038f8:	2001      	movs	r0, #1
 80038fa:	f000 fb10 	bl	8003f1e <xQueueCreateMutexStatic>
 80038fe:	61f8      	str	r0, [r7, #28]
 8003900:	e00e      	b.n	8003920 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800390e:	2004      	movs	r0, #4
 8003910:	f000 faed 	bl	8003eee <xQueueCreateMutex>
 8003914:	61f8      	str	r0, [r7, #28]
 8003916:	e003      	b.n	8003920 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003918:	2001      	movs	r0, #1
 800391a:	f000 fae8 	bl	8003eee <xQueueCreateMutex>
 800391e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <osMutexNew+0xee>
        if (attr != NULL) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <osMutexNew+0xe2>
          name = attr->name;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e001      	b.n	8003938 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	69f8      	ldr	r0, [r7, #28]
 800393c:	f001 f822 	bl	8004984 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <osMutexNew+0x102>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003954:	69fb      	ldr	r3, [r7, #28]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397c:	f3ef 8305 	mrs	r3, IPSR
 8003980:	60bb      	str	r3, [r7, #8]
  return(result);
 8003982:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003988:	f06f 0305 	mvn.w	r3, #5
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e02c      	b.n	80039ea <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003996:	f06f 0303 	mvn.w	r3, #3
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	e025      	b.n	80039ea <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d011      	beq.n	80039c8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	6938      	ldr	r0, [r7, #16]
 80039a8:	f000 fb08 	bl	8003fbc <xQueueTakeMutexRecursive>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d01b      	beq.n	80039ea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80039b8:	f06f 0301 	mvn.w	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e014      	b.n	80039ea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80039c0:	f06f 0302 	mvn.w	r3, #2
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e010      	b.n	80039ea <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	6938      	ldr	r0, [r7, #16]
 80039cc:	f000 fda6 	bl	800451c <xQueueSemaphoreTake>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d009      	beq.n	80039ea <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80039dc:	f06f 0301 	mvn.w	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e002      	b.n	80039ea <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80039e4:	f06f 0302 	mvn.w	r3, #2
 80039e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80039ea:	697b      	ldr	r3, [r7, #20]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a10:	f3ef 8305 	mrs	r3, IPSR
 8003a14:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a16:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003a1c:	f06f 0305 	mvn.w	r3, #5
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e01f      	b.n	8003a64 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003a2a:	f06f 0303 	mvn.w	r3, #3
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e018      	b.n	8003a64 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003a38:	6938      	ldr	r0, [r7, #16]
 8003a3a:	f000 fa8b 	bl	8003f54 <xQueueGiveMutexRecursive>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d00f      	beq.n	8003a64 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003a44:	f06f 0302 	mvn.w	r3, #2
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e00b      	b.n	8003a64 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	6938      	ldr	r0, [r7, #16]
 8003a54:	f000 fae8 	bl	8004028 <xQueueGenericSend>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d002      	beq.n	8003a64 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003a5e:	f06f 0302 	mvn.w	r3, #2
 8003a62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003a64:	697b      	ldr	r3, [r7, #20]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <vApplicationGetIdleTaskMemory+0x30>)
 8003a86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	601a      	str	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000030 	.word	0x20000030
 8003aa0:	2000008c 	.word	0x2000008c

08003aa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ab4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4a06      	ldr	r2, [pc, #24]	; (8003ad4 <vApplicationGetTimerTaskMemory+0x30>)
 8003aba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac2:	601a      	str	r2, [r3, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	2000028c 	.word	0x2000028c
 8003ad4:	200002e8 	.word	0x200002e8

08003ad8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f103 0208 	add.w	r2, r3, #8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f103 0208 	add.w	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f103 0208 	add.w	r2, r3, #8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b90:	d103      	bne.n	8003b9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e00c      	b.n	8003bb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e002      	b.n	8003ba8 <vListInsert+0x2e>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d2f6      	bcs.n	8003ba2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6852      	ldr	r2, [r2, #4]
 8003c0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d103      	bne.n	8003c20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	1e5a      	subs	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c6a:	f002 fbeb 	bl	8006444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	441a      	add	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	68f9      	ldr	r1, [r7, #12]
 8003c9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	441a      	add	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d114      	bne.n	8003cea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01a      	beq.n	8003cfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3310      	adds	r3, #16
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 fb95 	bl	80053fc <xTaskRemoveFromEventList>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <xQueueGenericReset+0xcc>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	e009      	b.n	8003cfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3310      	adds	r3, #16
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fef2 	bl	8003ad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3324      	adds	r3, #36	; 0x24
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff feed 	bl	8003ad8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cfe:	f002 fbd1 	bl	80064a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08e      	sub	sp, #56	; 0x38
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <xQueueGenericCreateStatic+0x52>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <xQueueGenericCreateStatic+0x56>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <xQueueGenericCreateStatic+0x58>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	623b      	str	r3, [r7, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <xQueueGenericCreateStatic+0x7e>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <xQueueGenericCreateStatic+0x82>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <xQueueGenericCreateStatic+0x84>
 8003d92:	2300      	movs	r3, #0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	61fb      	str	r3, [r7, #28]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003dae:	2350      	movs	r3, #80	; 0x50
 8003db0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b50      	cmp	r3, #80	; 0x50
 8003db6:	d00a      	beq.n	8003dce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	61bb      	str	r3, [r7, #24]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003dce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003de2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f83f 	bl	8003e74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3730      	adds	r7, #48	; 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	613b      	str	r3, [r7, #16]
}
 8003e26:	bf00      	nop
 8003e28:	e7fe      	b.n	8003e28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3350      	adds	r3, #80	; 0x50
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 fc25 	bl	8006688 <pvPortMalloc>
 8003e3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d011      	beq.n	8003e6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3350      	adds	r3, #80	; 0x50
 8003e4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e58:	79fa      	ldrb	r2, [r7, #7]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f805 	bl	8003e74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d103      	bne.n	8003e90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e002      	b.n	8003e96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	69b8      	ldr	r0, [r7, #24]
 8003ea6:	f7ff fecb 	bl	8003c40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00e      	beq.n	8003ee6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003eda:	2300      	movs	r3, #0
 8003edc:	2200      	movs	r2, #0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f8a1 	bl	8004028 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	461a      	mov	r2, r3
 8003f04:	6939      	ldr	r1, [r7, #16]
 8003f06:	6978      	ldr	r0, [r7, #20]
 8003f08:	f7ff ff7a 	bl	8003e00 <xQueueGenericCreate>
 8003f0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff ffd3 	bl	8003eba <prvInitialiseMutex>

		return xNewQueue;
 8003f14:	68fb      	ldr	r3, [r7, #12]
	}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b088      	sub	sp, #32
 8003f22:	af02      	add	r7, sp, #8
 8003f24:	4603      	mov	r3, r0
 8003f26:	6039      	str	r1, [r7, #0]
 8003f28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	6939      	ldr	r1, [r7, #16]
 8003f3c:	6978      	ldr	r0, [r7, #20]
 8003f3e:	f7ff fee7 	bl	8003d10 <xQueueGenericCreateStatic>
 8003f42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff ffb8 	bl	8003eba <prvInitialiseMutex>

		return xNewQueue;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fb      	str	r3, [r7, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	689c      	ldr	r4, [r3, #8]
 8003f80:	f001 fbfa 	bl	8005778 <xTaskGetCurrentTaskHandle>
 8003f84:	4603      	mov	r3, r0
 8003f86:	429c      	cmp	r4, r3
 8003f88:	d111      	bne.n	8003fae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	1e5a      	subs	r2, r3, #1
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	6938      	ldr	r0, [r7, #16]
 8003fa4:	f000 f840 	bl	8004028 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e001      	b.n	8003fb2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003fb2:	697b      	ldr	r3, [r7, #20]
	}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd90      	pop	{r4, r7, pc}

08003fbc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	60fb      	str	r3, [r7, #12]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	689c      	ldr	r4, [r3, #8]
 8003fea:	f001 fbc5 	bl	8005778 <xTaskGetCurrentTaskHandle>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	429c      	cmp	r4, r3
 8003ff2:	d107      	bne.n	8004004 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003ffe:	2301      	movs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e00c      	b.n	800401e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	6938      	ldr	r0, [r7, #16]
 8004008:	f000 fa88 	bl	800451c <xQueueSemaphoreTake>
 800400c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800401e:	697b      	ldr	r3, [r7, #20]
	}
 8004020:	4618      	mov	r0, r3
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	bd90      	pop	{r4, r7, pc}

08004028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	; 0x38
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xQueueGenericSend+0x32>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <xQueueGenericSend+0x40>
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueGenericSend+0x44>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueGenericSend+0x46>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <xQueueGenericSend+0x60>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x6e>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <xQueueGenericSend+0x72>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSend+0x74>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b6:	f001 fb6f 	bl	8005798 <xTaskGetSchedulerState>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <xQueueGenericSend+0x9e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <xQueueGenericSend+0xa2>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <xQueueGenericSend+0xa4>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61fb      	str	r3, [r7, #28]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e6:	f002 f9ad 	bl	8006444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <xQueueGenericSend+0xd4>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d129      	bne.n	8004150 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004102:	f000 fb2f 	bl	8004764 <prvCopyDataToQueue>
 8004106:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f001 f971 	bl	80053fc <xTaskRemoveFromEventList>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <xQueueGenericSend+0x1f8>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	e00a      	b.n	8004148 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004138:	4b39      	ldr	r3, [pc, #228]	; (8004220 <xQueueGenericSend+0x1f8>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004148:	f002 f9ac 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 800414c:	2301      	movs	r3, #1
 800414e:	e063      	b.n	8004218 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004156:	f002 f9a5 	bl	80064a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800415a:	2300      	movs	r3, #0
 800415c:	e05c      	b.n	8004218 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4618      	mov	r0, r3
 800416a:	f001 f9ab 	bl	80054c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800416e:	2301      	movs	r3, #1
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004172:	f002 f997 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004176:	f000 ff1d 	bl	8004fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800417a:	f002 f963 	bl	8006444 <vPortEnterCritical>
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004184:	b25b      	sxtb	r3, r3
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800418a:	d103      	bne.n	8004194 <xQueueGenericSend+0x16c>
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a0:	d103      	bne.n	80041aa <xQueueGenericSend+0x182>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041aa:	f002 f97b 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ae:	1d3a      	adds	r2, r7, #4
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 f99a 	bl	80054f0 <xTaskCheckForTimeOut>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d124      	bne.n	800420c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c4:	f000 fbc6 	bl	8004954 <prvIsQueueFull>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	3310      	adds	r3, #16
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 f8c0 	bl	800535c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041de:	f000 fb51 	bl	8004884 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041e2:	f000 fef5 	bl	8004fd0 <xTaskResumeAll>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f47f af7c 	bne.w	80040e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xQueueGenericSend+0x1f8>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	e772      	b.n	80040e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004202:	f000 fb3f 	bl	8004884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004206:	f000 fee3 	bl	8004fd0 <xTaskResumeAll>
 800420a:	e76c      	b.n	80040e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 fb39 	bl	8004884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004212:	f000 fedd 	bl	8004fd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004216:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004218:	4618      	mov	r0, r3
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b090      	sub	sp, #64	; 0x40
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <xQueueGenericSendFromISR+0x3c>
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <xQueueGenericSendFromISR+0x40>
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <xQueueGenericSendFromISR+0x42>
 8004264:	2300      	movs	r3, #0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d103      	bne.n	800428e <xQueueGenericSendFromISR+0x6a>
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <xQueueGenericSendFromISR+0x6e>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueGenericSendFromISR+0x70>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	623b      	str	r3, [r7, #32]
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042ae:	f002 f9ab 	bl	8006608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042b2:	f3ef 8211 	mrs	r2, BASEPRI
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	61fa      	str	r2, [r7, #28]
 80042c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d302      	bcc.n	80042e0 <xQueueGenericSendFromISR+0xbc>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d12f      	bne.n	8004340 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042f6:	f000 fa35 	bl	8004764 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004302:	d112      	bne.n	800432a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d016      	beq.n	800433a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800430c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430e:	3324      	adds	r3, #36	; 0x24
 8004310:	4618      	mov	r0, r3
 8004312:	f001 f873 	bl	80053fc <xTaskRemoveFromEventList>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00e      	beq.n	800433a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e007      	b.n	800433a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800432a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800432e:	3301      	adds	r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	b25a      	sxtb	r2, r3
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800433a:	2301      	movs	r3, #1
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800433e:	e001      	b.n	8004344 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800434e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004352:	4618      	mov	r0, r3
 8004354:	3740      	adds	r7, #64	; 0x40
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <xQueueReceive+0x30>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	623b      	str	r3, [r7, #32]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <xQueueReceive+0x3e>
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <xQueueReceive+0x42>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <xQueueReceive+0x44>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <xQueueReceive+0x5e>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	61fb      	str	r3, [r7, #28]
}
 80043b6:	bf00      	nop
 80043b8:	e7fe      	b.n	80043b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ba:	f001 f9ed 	bl	8005798 <xTaskGetSchedulerState>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <xQueueReceive+0x6e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <xQueueReceive+0x72>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <xQueueReceive+0x74>
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xQueueReceive+0x8e>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	61bb      	str	r3, [r7, #24]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043ea:	f002 f82b 	bl	8006444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01f      	beq.n	800443a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043fe:	f000 fa1b 	bl	8004838 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00f      	beq.n	8004432 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	3310      	adds	r3, #16
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fff0 	bl	80053fc <xTaskRemoveFromEventList>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004422:	4b3d      	ldr	r3, [pc, #244]	; (8004518 <xQueueReceive+0x1bc>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004432:	f002 f837 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 8004436:	2301      	movs	r3, #1
 8004438:	e069      	b.n	800450e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d103      	bne.n	8004448 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004440:	f002 f830 	bl	80064a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004444:	2300      	movs	r3, #0
 8004446:	e062      	b.n	800450e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800444e:	f107 0310 	add.w	r3, r7, #16
 8004452:	4618      	mov	r0, r3
 8004454:	f001 f836 	bl	80054c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004458:	2301      	movs	r3, #1
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800445c:	f002 f822 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004460:	f000 fda8 	bl	8004fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004464:	f001 ffee 	bl	8006444 <vPortEnterCritical>
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800446e:	b25b      	sxtb	r3, r3
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004474:	d103      	bne.n	800447e <xQueueReceive+0x122>
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004484:	b25b      	sxtb	r3, r3
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448a:	d103      	bne.n	8004494 <xQueueReceive+0x138>
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004494:	f002 f806 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004498:	1d3a      	adds	r2, r7, #4
 800449a:	f107 0310 	add.w	r3, r7, #16
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 f825 	bl	80054f0 <xTaskCheckForTimeOut>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d123      	bne.n	80044f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ae:	f000 fa3b 	bl	8004928 <prvIsQueueEmpty>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d017      	beq.n	80044e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ba:	3324      	adds	r3, #36	; 0x24
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 ff4b 	bl	800535c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c8:	f000 f9dc 	bl	8004884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044cc:	f000 fd80 	bl	8004fd0 <xTaskResumeAll>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d189      	bne.n	80043ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <xQueueReceive+0x1bc>)
 80044d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	e780      	b.n	80043ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ea:	f000 f9cb 	bl	8004884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044ee:	f000 fd6f 	bl	8004fd0 <xTaskResumeAll>
 80044f2:	e77a      	b.n	80043ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f6:	f000 f9c5 	bl	8004884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044fa:	f000 fd69 	bl	8004fd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004500:	f000 fa12 	bl	8004928 <prvIsQueueEmpty>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	f43f af6f 	beq.w	80043ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800450c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800450e:	4618      	mov	r0, r3
 8004510:	3730      	adds	r7, #48	; 0x30
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	; 0x38
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004526:	2300      	movs	r3, #0
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800452e:	2300      	movs	r3, #0
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	623b      	str	r3, [r7, #32]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	61fb      	str	r3, [r7, #28]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800456c:	f001 f914 	bl	8005798 <xTaskGetSchedulerState>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <xQueueSemaphoreTake+0x60>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <xQueueSemaphoreTake+0x64>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <xQueueSemaphoreTake+0x66>
 8004580:	2300      	movs	r3, #0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	61bb      	str	r3, [r7, #24]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800459c:	f001 ff52 	bl	8006444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d024      	beq.n	80045f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	1e5a      	subs	r2, r3, #1
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80045bc:	f001 fa62 	bl	8005a84 <pvTaskIncrementMutexHeldCount>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00f      	beq.n	80045ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	3310      	adds	r3, #16
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ff12 	bl	80053fc <xTaskRemoveFromEventList>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045de:	4b54      	ldr	r3, [pc, #336]	; (8004730 <xQueueSemaphoreTake+0x214>)
 80045e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045ee:	f001 ff59 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e097      	b.n	8004726 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d111      	bne.n	8004620 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	617b      	str	r3, [r7, #20]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004618:	f001 ff44 	bl	80064a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800461c:	2300      	movs	r3, #0
 800461e:	e082      	b.n	8004726 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	4618      	mov	r0, r3
 800462c:	f000 ff4a 	bl	80054c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004634:	f001 ff36 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004638:	f000 fcbc 	bl	8004fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800463c:	f001 ff02 	bl	8006444 <vPortEnterCritical>
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004646:	b25b      	sxtb	r3, r3
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800464c:	d103      	bne.n	8004656 <xQueueSemaphoreTake+0x13a>
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465c:	b25b      	sxtb	r3, r3
 800465e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004662:	d103      	bne.n	800466c <xQueueSemaphoreTake+0x150>
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800466c:	f001 ff1a 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004670:	463a      	mov	r2, r7
 8004672:	f107 030c 	add.w	r3, r7, #12
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f000 ff39 	bl	80054f0 <xTaskCheckForTimeOut>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d132      	bne.n	80046ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004686:	f000 f94f 	bl	8004928 <prvIsQueueEmpty>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d026      	beq.n	80046de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004698:	f001 fed4 	bl	8006444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 f897 	bl	80057d4 <xTaskPriorityInherit>
 80046a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80046a8:	f001 fefc 	bl	80064a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	3324      	adds	r3, #36	; 0x24
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fe51 	bl	800535c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046bc:	f000 f8e2 	bl	8004884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046c0:	f000 fc86 	bl	8004fd0 <xTaskResumeAll>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f47f af68 	bne.w	800459c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <xQueueSemaphoreTake+0x214>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	e75e      	b.n	800459c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80046de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046e0:	f000 f8d0 	bl	8004884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046e4:	f000 fc74 	bl	8004fd0 <xTaskResumeAll>
 80046e8:	e758      	b.n	800459c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80046ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046ec:	f000 f8ca 	bl	8004884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046f0:	f000 fc6e 	bl	8004fd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046f6:	f000 f917 	bl	8004928 <prvIsQueueEmpty>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f43f af4d 	beq.w	800459c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004708:	f001 fe9c 	bl	8006444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800470c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800470e:	f000 f811 	bl	8004734 <prvGetDisinheritPriorityAfterTimeout>
 8004712:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800471a:	4618      	mov	r0, r3
 800471c:	f001 f930 	bl	8005980 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004720:	f001 fec0 	bl	80064a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004726:	4618      	mov	r0, r3
 8004728:	3738      	adds	r7, #56	; 0x38
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2b00      	cmp	r3, #0
 8004742:	d006      	beq.n	8004752 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e001      	b.n	8004756 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004756:	68fb      	ldr	r3, [r7, #12]
	}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d14d      	bne.n	8004826 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f001 f888 	bl	80058a4 <xTaskPriorityDisinherit>
 8004794:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	e043      	b.n	8004826 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d119      	bne.n	80047d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6858      	ldr	r0, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	461a      	mov	r2, r3
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	f002 f978 	bl	8006aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	441a      	add	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d32b      	bcc.n	8004826 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	e026      	b.n	8004826 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68d8      	ldr	r0, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	461a      	mov	r2, r3
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	f002 f95e 	bl	8006aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	425b      	negs	r3, r3
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d207      	bcs.n	8004814 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	425b      	negs	r3, r3
 800480e:	441a      	add	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d105      	bne.n	8004826 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	3b01      	subs	r3, #1
 8004824:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800482e:	697b      	ldr	r3, [r7, #20]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d018      	beq.n	800487c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	441a      	add	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	d303      	bcc.n	800486c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68d9      	ldr	r1, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	461a      	mov	r2, r3
 8004876:	6838      	ldr	r0, [r7, #0]
 8004878:	f002 f914 	bl	8006aa4 <memcpy>
	}
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800488c:	f001 fdda 	bl	8006444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004896:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004898:	e011      	b.n	80048be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d012      	beq.n	80048c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3324      	adds	r3, #36	; 0x24
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fda8 	bl	80053fc <xTaskRemoveFromEventList>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048b2:	f000 fe7f 	bl	80055b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	dce9      	bgt.n	800489a <prvUnlockQueue+0x16>
 80048c6:	e000      	b.n	80048ca <prvUnlockQueue+0x46>
					break;
 80048c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	22ff      	movs	r2, #255	; 0xff
 80048ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048d2:	f001 fde7 	bl	80064a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048d6:	f001 fdb5 	bl	8006444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048e2:	e011      	b.n	8004908 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d012      	beq.n	8004912 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3310      	adds	r3, #16
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fd83 	bl	80053fc <xTaskRemoveFromEventList>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048fc:	f000 fe5a 	bl	80055b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	3b01      	subs	r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800490c:	2b00      	cmp	r3, #0
 800490e:	dce9      	bgt.n	80048e4 <prvUnlockQueue+0x60>
 8004910:	e000      	b.n	8004914 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004912:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	22ff      	movs	r2, #255	; 0xff
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800491c:	f001 fdc2 	bl	80064a4 <vPortExitCritical>
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004930:	f001 fd88 	bl	8006444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e001      	b.n	8004946 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004946:	f001 fdad 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 800494a:	68fb      	ldr	r3, [r7, #12]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800495c:	f001 fd72 	bl	8006444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	429a      	cmp	r2, r3
 800496a:	d102      	bne.n	8004972 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800496c:	2301      	movs	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e001      	b.n	8004976 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004976:	f001 fd95 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e014      	b.n	80049be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004994:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <vQueueAddToRegistry+0x50>)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049a0:	490c      	ldr	r1, [pc, #48]	; (80049d4 <vQueueAddToRegistry+0x50>)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049aa:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <vQueueAddToRegistry+0x50>)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049b6:	e006      	b.n	80049c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b07      	cmp	r3, #7
 80049c2:	d9e7      	bls.n	8004994 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20001dc4 	.word	0x20001dc4

080049d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049e8:	f001 fd2c 	bl	8006444 <vPortEnterCritical>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f2:	b25b      	sxtb	r3, r3
 80049f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f8:	d103      	bne.n	8004a02 <vQueueWaitForMessageRestricted+0x2a>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a08:	b25b      	sxtb	r3, r3
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a0e:	d103      	bne.n	8004a18 <vQueueWaitForMessageRestricted+0x40>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a18:	f001 fd44 	bl	80064a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	3324      	adds	r3, #36	; 0x24
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fcb9 	bl	80053a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a32:	6978      	ldr	r0, [r7, #20]
 8004a34:	f7ff ff26 	bl	8004884 <prvUnlockQueue>
	}
 8004a38:	bf00      	nop
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08e      	sub	sp, #56	; 0x38
 8004a44:	af04      	add	r7, sp, #16
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	623b      	str	r3, [r7, #32]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a86:	235c      	movs	r3, #92	; 0x5c
 8004a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b5c      	cmp	r3, #92	; 0x5c
 8004a8e:	d00a      	beq.n	8004aa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	61bb      	str	r3, [r7, #24]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004aa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01e      	beq.n	8004aec <xTaskCreateStatic+0xac>
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9303      	str	r3, [sp, #12]
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	9302      	str	r3, [sp, #8]
 8004ace:	f107 0314 	add.w	r3, r7, #20
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f850 	bl	8004b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ae6:	f000 f8dd 	bl	8004ca4 <prvAddNewTaskToReadyList>
 8004aea:	e001      	b.n	8004af0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004af0:	697b      	ldr	r3, [r7, #20]
	}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3728      	adds	r7, #40	; 0x28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b08c      	sub	sp, #48	; 0x30
 8004afe:	af04      	add	r7, sp, #16
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 fdba 	bl	8006688 <pvPortMalloc>
 8004b14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b1c:	205c      	movs	r0, #92	; 0x5c
 8004b1e:	f001 fdb3 	bl	8006688 <pvPortMalloc>
 8004b22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b30:	e005      	b.n	8004b3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f001 fe74 	bl	8006820 <vPortFree>
 8004b38:	e001      	b.n	8004b3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d017      	beq.n	8004b74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b4c:	88fa      	ldrh	r2, [r7, #6]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9303      	str	r3, [sp, #12]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f80e 	bl	8004b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b68:	69f8      	ldr	r0, [r7, #28]
 8004b6a:	f000 f89b 	bl	8004ca4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e002      	b.n	8004b7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	21a5      	movs	r1, #165	; 0xa5
 8004b9e:	f001 ff8f 	bl	8006ac0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bac:	3b01      	subs	r3, #1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f023 0307 	bic.w	r3, r3, #7
 8004bba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	617b      	str	r3, [r7, #20]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01f      	beq.n	8004c22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	e012      	b.n	8004c0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	7819      	ldrb	r1, [r3, #0]
 8004bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3334      	adds	r3, #52	; 0x34
 8004bf8:	460a      	mov	r2, r1
 8004bfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b0f      	cmp	r3, #15
 8004c12:	d9e9      	bls.n	8004be8 <prvInitialiseNewTask+0x64>
 8004c14:	e000      	b.n	8004c18 <prvInitialiseNewTask+0x94>
			{
				break;
 8004c16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c20:	e003      	b.n	8004c2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	2b37      	cmp	r3, #55	; 0x37
 8004c2e:	d901      	bls.n	8004c34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c30:	2337      	movs	r3, #55	; 0x37
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	2200      	movs	r2, #0
 8004c44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe ff64 	bl	8003b18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	3318      	adds	r3, #24
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fe ff5f 	bl	8003b18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	2200      	movs	r2, #0
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	69b8      	ldr	r0, [r7, #24]
 8004c84:	f001 fab4 	bl	80061f0 <pxPortInitialiseStack>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c9a:	bf00      	nop
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cac:	f001 fbca 	bl	8006444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <prvAddNewTaskToReadyList+0xc4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	4a2c      	ldr	r2, [pc, #176]	; (8004d68 <prvAddNewTaskToReadyList+0xc4>)
 8004cb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cba:	4b2c      	ldr	r3, [pc, #176]	; (8004d6c <prvAddNewTaskToReadyList+0xc8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cc2:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <prvAddNewTaskToReadyList+0xc8>)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <prvAddNewTaskToReadyList+0xc4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d110      	bne.n	8004cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cd0:	f000 fc94 	bl	80055fc <prvInitialiseTaskLists>
 8004cd4:	e00d      	b.n	8004cf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <prvAddNewTaskToReadyList+0xcc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cde:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <prvAddNewTaskToReadyList+0xc8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d802      	bhi.n	8004cf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <prvAddNewTaskToReadyList+0xc8>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <prvAddNewTaskToReadyList+0xd0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <prvAddNewTaskToReadyList+0xd0>)
 8004cfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <prvAddNewTaskToReadyList+0xd0>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <prvAddNewTaskToReadyList+0xd4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d903      	bls.n	8004d18 <prvAddNewTaskToReadyList+0x74>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <prvAddNewTaskToReadyList+0xd4>)
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <prvAddNewTaskToReadyList+0xd8>)
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7fe feff 	bl	8003b32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d34:	f001 fbb6 	bl	80064a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <prvAddNewTaskToReadyList+0xcc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <prvAddNewTaskToReadyList+0xc8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d207      	bcs.n	8004d5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <prvAddNewTaskToReadyList+0xdc>)
 8004d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000bbc 	.word	0x20000bbc
 8004d6c:	200006e8 	.word	0x200006e8
 8004d70:	20000bc8 	.word	0x20000bc8
 8004d74:	20000bd8 	.word	0x20000bd8
 8004d78:	20000bc4 	.word	0x20000bc4
 8004d7c:	200006ec 	.word	0x200006ec
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08a      	sub	sp, #40	; 0x28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <vTaskDelayUntil+0x2a>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	617b      	str	r3, [r7, #20]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <vTaskDelayUntil+0x46>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	613b      	str	r3, [r7, #16]
}
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004dca:	4b2a      	ldr	r3, [pc, #168]	; (8004e74 <vTaskDelayUntil+0xf0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <vTaskDelayUntil+0x64>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60fb      	str	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004de8:	f000 f8e4 	bl	8004fb4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004dec:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <vTaskDelayUntil+0xf4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4413      	add	r3, r2
 8004dfa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d20b      	bcs.n	8004e1e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d211      	bcs.n	8004e34 <vTaskDelayUntil+0xb0>
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d90d      	bls.n	8004e34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	e00a      	b.n	8004e34 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d303      	bcc.n	8004e30 <vTaskDelayUntil+0xac>
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d901      	bls.n	8004e34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d006      	beq.n	8004e4e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fe2f 	bl	8005aac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004e4e:	f000 f8bf 	bl	8004fd0 <xTaskResumeAll>
 8004e52:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d107      	bne.n	8004e6a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004e5a:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <vTaskDelayUntil+0xf8>)
 8004e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e6a:	bf00      	nop
 8004e6c:	3728      	adds	r7, #40	; 0x28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000be4 	.word	0x20000be4
 8004e78:	20000bc0 	.word	0x20000bc0
 8004e7c:	e000ed04 	.word	0xe000ed04

08004e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d017      	beq.n	8004ec2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <vTaskDelay+0x60>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <vTaskDelay+0x30>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	60bb      	str	r3, [r7, #8]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004eb0:	f000 f880 	bl	8004fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fdf8 	bl	8005aac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ebc:	f000 f888 	bl	8004fd0 <xTaskResumeAll>
 8004ec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d107      	bne.n	8004ed8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <vTaskDelay+0x64>)
 8004eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20000be4 	.word	0x20000be4
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	; 0x28
 8004eec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ef6:	463a      	mov	r2, r7
 8004ef8:	1d39      	adds	r1, r7, #4
 8004efa:	f107 0308 	add.w	r3, r7, #8
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fdb6 	bl	8003a70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	9202      	str	r2, [sp, #8]
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	460a      	mov	r2, r1
 8004f16:	4921      	ldr	r1, [pc, #132]	; (8004f9c <vTaskStartScheduler+0xb4>)
 8004f18:	4821      	ldr	r0, [pc, #132]	; (8004fa0 <vTaskStartScheduler+0xb8>)
 8004f1a:	f7ff fd91 	bl	8004a40 <xTaskCreateStatic>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <vTaskStartScheduler+0xbc>)
 8004f22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f24:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <vTaskStartScheduler+0xbc>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e001      	b.n	8004f36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d102      	bne.n	8004f42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f3c:	f000 fe0a 	bl	8005b54 <xTimerCreateTimerTask>
 8004f40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d116      	bne.n	8004f76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	613b      	str	r3, [r7, #16]
}
 8004f5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <vTaskStartScheduler+0xc0>)
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <vTaskStartScheduler+0xc4>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f6a:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <vTaskStartScheduler+0xc8>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f70:	f001 f9c6 	bl	8006300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f74:	e00e      	b.n	8004f94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7c:	d10a      	bne.n	8004f94 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	60fb      	str	r3, [r7, #12]
}
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <vTaskStartScheduler+0xaa>
}
 8004f94:	bf00      	nop
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	08006b28 	.word	0x08006b28
 8004fa0:	080055cd 	.word	0x080055cd
 8004fa4:	20000be0 	.word	0x20000be0
 8004fa8:	20000bdc 	.word	0x20000bdc
 8004fac:	20000bc8 	.word	0x20000bc8
 8004fb0:	20000bc0 	.word	0x20000bc0

08004fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <vTaskSuspendAll+0x18>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <vTaskSuspendAll+0x18>)
 8004fc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fc2:	bf00      	nop
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	20000be4 	.word	0x20000be4

08004fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fde:	4b42      	ldr	r3, [pc, #264]	; (80050e8 <xTaskResumeAll+0x118>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <xTaskResumeAll+0x2c>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ffc:	f001 fa22 	bl	8006444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005000:	4b39      	ldr	r3, [pc, #228]	; (80050e8 <xTaskResumeAll+0x118>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	4a38      	ldr	r2, [pc, #224]	; (80050e8 <xTaskResumeAll+0x118>)
 8005008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500a:	4b37      	ldr	r3, [pc, #220]	; (80050e8 <xTaskResumeAll+0x118>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d162      	bne.n	80050d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <xTaskResumeAll+0x11c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d05e      	beq.n	80050d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501a:	e02f      	b.n	800507c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501c:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <xTaskResumeAll+0x120>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3318      	adds	r3, #24
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fddf 	bl	8003bec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3304      	adds	r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fdda 	bl	8003bec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <xTaskResumeAll+0x124>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d903      	bls.n	800504c <xTaskResumeAll+0x7c>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <xTaskResumeAll+0x124>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <xTaskResumeAll+0x128>)
 800505a:	441a      	add	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7fe fd65 	bl	8003b32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506c:	4b23      	ldr	r3, [pc, #140]	; (80050fc <xTaskResumeAll+0x12c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005076:	4b22      	ldr	r3, [pc, #136]	; (8005100 <xTaskResumeAll+0x130>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <xTaskResumeAll+0x120>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1cb      	bne.n	800501c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800508a:	f000 fb55 	bl	8005738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800508e:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <xTaskResumeAll+0x134>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800509a:	f000 f847 	bl	800512c <xTaskIncrementTick>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050a4:	4b16      	ldr	r3, [pc, #88]	; (8005100 <xTaskResumeAll+0x130>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f1      	bne.n	800509a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050b6:	4b13      	ldr	r3, [pc, #76]	; (8005104 <xTaskResumeAll+0x134>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <xTaskResumeAll+0x130>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xTaskResumeAll+0x138>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d8:	f001 f9e4 	bl	80064a4 <vPortExitCritical>

	return xAlreadyYielded;
 80050dc:	68bb      	ldr	r3, [r7, #8]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000be4 	.word	0x20000be4
 80050ec:	20000bbc 	.word	0x20000bbc
 80050f0:	20000b7c 	.word	0x20000b7c
 80050f4:	20000bc4 	.word	0x20000bc4
 80050f8:	200006ec 	.word	0x200006ec
 80050fc:	200006e8 	.word	0x200006e8
 8005100:	20000bd0 	.word	0x20000bd0
 8005104:	20000bcc 	.word	0x20000bcc
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <xTaskGetTickCount+0x1c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005118:	687b      	ldr	r3, [r7, #4]
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000bc0 	.word	0x20000bc0

0800512c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005136:	4b4f      	ldr	r3, [pc, #316]	; (8005274 <xTaskIncrementTick+0x148>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 808f 	bne.w	800525e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005140:	4b4d      	ldr	r3, [pc, #308]	; (8005278 <xTaskIncrementTick+0x14c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3301      	adds	r3, #1
 8005146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005148:	4a4b      	ldr	r2, [pc, #300]	; (8005278 <xTaskIncrementTick+0x14c>)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d120      	bne.n	8005196 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005154:	4b49      	ldr	r3, [pc, #292]	; (800527c <xTaskIncrementTick+0x150>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <xTaskIncrementTick+0x48>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	603b      	str	r3, [r7, #0]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xTaskIncrementTick+0x46>
 8005174:	4b41      	ldr	r3, [pc, #260]	; (800527c <xTaskIncrementTick+0x150>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <xTaskIncrementTick+0x154>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3f      	ldr	r2, [pc, #252]	; (800527c <xTaskIncrementTick+0x150>)
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4a3f      	ldr	r2, [pc, #252]	; (8005280 <xTaskIncrementTick+0x154>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b3e      	ldr	r3, [pc, #248]	; (8005284 <xTaskIncrementTick+0x158>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	4a3d      	ldr	r2, [pc, #244]	; (8005284 <xTaskIncrementTick+0x158>)
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	f000 fad1 	bl	8005738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005196:	4b3c      	ldr	r3, [pc, #240]	; (8005288 <xTaskIncrementTick+0x15c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d349      	bcc.n	8005234 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a0:	4b36      	ldr	r3, [pc, #216]	; (800527c <xTaskIncrementTick+0x150>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051aa:	4b37      	ldr	r3, [pc, #220]	; (8005288 <xTaskIncrementTick+0x15c>)
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b0:	601a      	str	r2, [r3, #0]
					break;
 80051b2:	e03f      	b.n	8005234 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b4:	4b31      	ldr	r3, [pc, #196]	; (800527c <xTaskIncrementTick+0x150>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d203      	bcs.n	80051d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051cc:	4a2e      	ldr	r2, [pc, #184]	; (8005288 <xTaskIncrementTick+0x15c>)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051d2:	e02f      	b.n	8005234 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe fd07 	bl	8003bec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	3318      	adds	r3, #24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fcfe 	bl	8003bec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f4:	4b25      	ldr	r3, [pc, #148]	; (800528c <xTaskIncrementTick+0x160>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d903      	bls.n	8005204 <xTaskIncrementTick+0xd8>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	4a22      	ldr	r2, [pc, #136]	; (800528c <xTaskIncrementTick+0x160>)
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <xTaskIncrementTick+0x164>)
 8005212:	441a      	add	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f7fe fc89 	bl	8003b32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <xTaskIncrementTick+0x168>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	429a      	cmp	r2, r3
 800522c:	d3b8      	bcc.n	80051a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005232:	e7b5      	b.n	80051a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005234:	4b17      	ldr	r3, [pc, #92]	; (8005294 <xTaskIncrementTick+0x168>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523a:	4915      	ldr	r1, [pc, #84]	; (8005290 <xTaskIncrementTick+0x164>)
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d901      	bls.n	8005250 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005250:	4b11      	ldr	r3, [pc, #68]	; (8005298 <xTaskIncrementTick+0x16c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e004      	b.n	8005268 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <xTaskIncrementTick+0x170>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <xTaskIncrementTick+0x170>)
 8005266:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005268:	697b      	ldr	r3, [r7, #20]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000be4 	.word	0x20000be4
 8005278:	20000bc0 	.word	0x20000bc0
 800527c:	20000b74 	.word	0x20000b74
 8005280:	20000b78 	.word	0x20000b78
 8005284:	20000bd4 	.word	0x20000bd4
 8005288:	20000bdc 	.word	0x20000bdc
 800528c:	20000bc4 	.word	0x20000bc4
 8005290:	200006ec 	.word	0x200006ec
 8005294:	200006e8 	.word	0x200006e8
 8005298:	20000bd0 	.word	0x20000bd0
 800529c:	20000bcc 	.word	0x20000bcc

080052a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052a6:	4b28      	ldr	r3, [pc, #160]	; (8005348 <vTaskSwitchContext+0xa8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052ae:	4b27      	ldr	r3, [pc, #156]	; (800534c <vTaskSwitchContext+0xac>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052b4:	e041      	b.n	800533a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80052b6:	4b25      	ldr	r3, [pc, #148]	; (800534c <vTaskSwitchContext+0xac>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052bc:	4b24      	ldr	r3, [pc, #144]	; (8005350 <vTaskSwitchContext+0xb0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e010      	b.n	80052e6 <vTaskSwitchContext+0x46>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	607b      	str	r3, [r7, #4]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <vTaskSwitchContext+0x3e>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	491b      	ldr	r1, [pc, #108]	; (8005354 <vTaskSwitchContext+0xb4>)
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0e4      	beq.n	80052c4 <vTaskSwitchContext+0x24>
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4a13      	ldr	r2, [pc, #76]	; (8005354 <vTaskSwitchContext+0xb4>)
 8005306:	4413      	add	r3, r2
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	3308      	adds	r3, #8
 800531c:	429a      	cmp	r2, r3
 800531e:	d104      	bne.n	800532a <vTaskSwitchContext+0x8a>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4a09      	ldr	r2, [pc, #36]	; (8005358 <vTaskSwitchContext+0xb8>)
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4a06      	ldr	r2, [pc, #24]	; (8005350 <vTaskSwitchContext+0xb0>)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6013      	str	r3, [r2, #0]
}
 800533a:	bf00      	nop
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000be4 	.word	0x20000be4
 800534c:	20000bd0 	.word	0x20000bd0
 8005350:	20000bc4 	.word	0x20000bc4
 8005354:	200006ec 	.word	0x200006ec
 8005358:	200006e8 	.word	0x200006e8

0800535c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60fb      	str	r3, [r7, #12]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <vTaskPlaceOnEventList+0x44>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3318      	adds	r3, #24
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fe fbf5 	bl	8003b7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005390:	2101      	movs	r1, #1
 8005392:	6838      	ldr	r0, [r7, #0]
 8005394:	f000 fb8a 	bl	8005aac <prvAddCurrentTaskToDelayedList>
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	200006e8 	.word	0x200006e8

080053a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	617b      	str	r3, [r7, #20]
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3318      	adds	r3, #24
 80053d2:	4619      	mov	r1, r3
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7fe fbac 	bl	8003b32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	68b8      	ldr	r0, [r7, #8]
 80053ea:	f000 fb5f 	bl	8005aac <prvAddCurrentTaskToDelayedList>
	}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200006e8 	.word	0x200006e8

080053fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60fb      	str	r3, [r7, #12]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3318      	adds	r3, #24
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe fbdd 	bl	8003bec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <xTaskRemoveFromEventList+0xb0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d11d      	bne.n	8005476 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3304      	adds	r3, #4
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe fbd4 	bl	8003bec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <xTaskRemoveFromEventList+0xb4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d903      	bls.n	8005458 <xTaskRemoveFromEventList+0x5c>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <xTaskRemoveFromEventList+0xb4>)
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <xTaskRemoveFromEventList+0xb8>)
 8005466:	441a      	add	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe fb5f 	bl	8003b32 <vListInsertEnd>
 8005474:	e005      	b.n	8005482 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	3318      	adds	r3, #24
 800547a:	4619      	mov	r1, r3
 800547c:	480e      	ldr	r0, [pc, #56]	; (80054b8 <xTaskRemoveFromEventList+0xbc>)
 800547e:	f7fe fb58 	bl	8003b32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <xTaskRemoveFromEventList+0xc0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	429a      	cmp	r2, r3
 800548e:	d905      	bls.n	800549c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <xTaskRemoveFromEventList+0xc4>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e001      	b.n	80054a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054a0:	697b      	ldr	r3, [r7, #20]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000be4 	.word	0x20000be4
 80054b0:	20000bc4 	.word	0x20000bc4
 80054b4:	200006ec 	.word	0x200006ec
 80054b8:	20000b7c 	.word	0x20000b7c
 80054bc:	200006e8 	.word	0x200006e8
 80054c0:	20000bd0 	.word	0x20000bd0

080054c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <vTaskInternalSetTimeOutState+0x24>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <vTaskInternalSetTimeOutState+0x28>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	20000bd4 	.word	0x20000bd4
 80054ec:	20000bc0 	.word	0x20000bc0

080054f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	613b      	str	r3, [r7, #16]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005532:	f000 ff87 	bl	8006444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005536:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <xTaskCheckForTimeOut+0xbc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800554e:	d102      	bne.n	8005556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	e023      	b.n	800559e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <xTaskCheckForTimeOut+0xc0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d007      	beq.n	8005572 <xTaskCheckForTimeOut+0x82>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	e015      	b.n	800559e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	429a      	cmp	r2, r3
 800557a:	d20b      	bcs.n	8005594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	1ad2      	subs	r2, r2, r3
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff9b 	bl	80054c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e004      	b.n	800559e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800559a:	2301      	movs	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800559e:	f000 ff81 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 80055a2:	69fb      	ldr	r3, [r7, #28]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000bc0 	.word	0x20000bc0
 80055b0:	20000bd4 	.word	0x20000bd4

080055b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <vTaskMissedYield+0x14>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000bd0 	.word	0x20000bd0

080055cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055d4:	f000 f852 	bl	800567c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <prvIdleTask+0x28>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d9f9      	bls.n	80055d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <prvIdleTask+0x2c>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055f0:	e7f0      	b.n	80055d4 <prvIdleTask+0x8>
 80055f2:	bf00      	nop
 80055f4:	200006ec 	.word	0x200006ec
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	e00c      	b.n	8005622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4a12      	ldr	r2, [pc, #72]	; (800565c <prvInitialiseTaskLists+0x60>)
 8005614:	4413      	add	r3, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fa5e 	bl	8003ad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b37      	cmp	r3, #55	; 0x37
 8005626:	d9ef      	bls.n	8005608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005628:	480d      	ldr	r0, [pc, #52]	; (8005660 <prvInitialiseTaskLists+0x64>)
 800562a:	f7fe fa55 	bl	8003ad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800562e:	480d      	ldr	r0, [pc, #52]	; (8005664 <prvInitialiseTaskLists+0x68>)
 8005630:	f7fe fa52 	bl	8003ad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005634:	480c      	ldr	r0, [pc, #48]	; (8005668 <prvInitialiseTaskLists+0x6c>)
 8005636:	f7fe fa4f 	bl	8003ad8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800563a:	480c      	ldr	r0, [pc, #48]	; (800566c <prvInitialiseTaskLists+0x70>)
 800563c:	f7fe fa4c 	bl	8003ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005640:	480b      	ldr	r0, [pc, #44]	; (8005670 <prvInitialiseTaskLists+0x74>)
 8005642:	f7fe fa49 	bl	8003ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005646:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <prvInitialiseTaskLists+0x78>)
 8005648:	4a05      	ldr	r2, [pc, #20]	; (8005660 <prvInitialiseTaskLists+0x64>)
 800564a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <prvInitialiseTaskLists+0x7c>)
 800564e:	4a05      	ldr	r2, [pc, #20]	; (8005664 <prvInitialiseTaskLists+0x68>)
 8005650:	601a      	str	r2, [r3, #0]
}
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200006ec 	.word	0x200006ec
 8005660:	20000b4c 	.word	0x20000b4c
 8005664:	20000b60 	.word	0x20000b60
 8005668:	20000b7c 	.word	0x20000b7c
 800566c:	20000b90 	.word	0x20000b90
 8005670:	20000ba8 	.word	0x20000ba8
 8005674:	20000b74 	.word	0x20000b74
 8005678:	20000b78 	.word	0x20000b78

0800567c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005682:	e019      	b.n	80056b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005684:	f000 fede 	bl	8006444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005688:	4b10      	ldr	r3, [pc, #64]	; (80056cc <prvCheckTasksWaitingTermination+0x50>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe faa9 	bl	8003bec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <prvCheckTasksWaitingTermination+0x54>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3b01      	subs	r3, #1
 80056a0:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <prvCheckTasksWaitingTermination+0x54>)
 80056a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056ae:	f000 fef9 	bl	80064a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f810 	bl	80056d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e1      	bne.n	8005684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000b90 	.word	0x20000b90
 80056d0:	20000bbc 	.word	0x20000bbc
 80056d4:	20000ba4 	.word	0x20000ba4

080056d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d108      	bne.n	80056fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 f896 	bl	8006820 <vPortFree>
				vPortFree( pxTCB );
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 f893 	bl	8006820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056fa:	e018      	b.n	800572e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005702:	2b01      	cmp	r3, #1
 8005704:	d103      	bne.n	800570e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 f88a 	bl	8006820 <vPortFree>
	}
 800570c:	e00f      	b.n	800572e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005714:	2b02      	cmp	r3, #2
 8005716:	d00a      	beq.n	800572e <prvDeleteTCB+0x56>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <prvDeleteTCB+0x54>
	}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <prvResetNextTaskUnblockTime+0x38>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <prvResetNextTaskUnblockTime+0x3c>)
 800574a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800574e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005750:	e008      	b.n	8005764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <prvResetNextTaskUnblockTime+0x38>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a04      	ldr	r2, [pc, #16]	; (8005774 <prvResetNextTaskUnblockTime+0x3c>)
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20000b74 	.word	0x20000b74
 8005774:	20000bdc 	.word	0x20000bdc

08005778 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <xTaskGetCurrentTaskHandle+0x1c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005784:	687b      	ldr	r3, [r7, #4]
	}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	200006e8 	.word	0x200006e8

08005798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <xTaskGetSchedulerState+0x34>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057a6:	2301      	movs	r3, #1
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	e008      	b.n	80057be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ac:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <xTaskGetSchedulerState+0x38>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057b4:	2302      	movs	r3, #2
 80057b6:	607b      	str	r3, [r7, #4]
 80057b8:	e001      	b.n	80057be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057be:	687b      	ldr	r3, [r7, #4]
	}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20000bc8 	.word	0x20000bc8
 80057d0:	20000be4 	.word	0x20000be4

080057d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d051      	beq.n	800588e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <xTaskPriorityInherit+0xc4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d241      	bcs.n	800587c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	db06      	blt.n	800580e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <xTaskPriorityInherit+0xc4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6959      	ldr	r1, [r3, #20]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4a1f      	ldr	r2, [pc, #124]	; (800589c <xTaskPriorityInherit+0xc8>)
 8005820:	4413      	add	r3, r2
 8005822:	4299      	cmp	r1, r3
 8005824:	d122      	bne.n	800586c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe f9de 	bl	8003bec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <xTaskPriorityInherit+0xc4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <xTaskPriorityInherit+0xcc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d903      	bls.n	800584e <xTaskPriorityInherit+0x7a>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <xTaskPriorityInherit+0xcc>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4a10      	ldr	r2, [pc, #64]	; (800589c <xTaskPriorityInherit+0xc8>)
 800585c:	441a      	add	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe f964 	bl	8003b32 <vListInsertEnd>
 800586a:	e004      	b.n	8005876 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <xTaskPriorityInherit+0xc4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e008      	b.n	800588e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <xTaskPriorityInherit+0xc4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	429a      	cmp	r2, r3
 8005888:	d201      	bcs.n	800588e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800588a:	2301      	movs	r3, #1
 800588c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800588e:	68fb      	ldr	r3, [r7, #12]
	}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	200006e8 	.word	0x200006e8
 800589c:	200006ec 	.word	0x200006ec
 80058a0:	20000bc4 	.word	0x20000bc4

080058a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d056      	beq.n	8005968 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058ba:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <xTaskPriorityDisinherit+0xd0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d00a      	beq.n	80058da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	60fb      	str	r3, [r7, #12]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60bb      	str	r3, [r7, #8]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	1e5a      	subs	r2, r3, #1
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	429a      	cmp	r2, r3
 800590c:	d02c      	beq.n	8005968 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005912:	2b00      	cmp	r3, #0
 8005914:	d128      	bne.n	8005968 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe f966 	bl	8003bec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <xTaskPriorityDisinherit+0xd4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d903      	bls.n	8005948 <xTaskPriorityDisinherit+0xa4>
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	4a0c      	ldr	r2, [pc, #48]	; (8005978 <xTaskPriorityDisinherit+0xd4>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4a09      	ldr	r2, [pc, #36]	; (800597c <xTaskPriorityDisinherit+0xd8>)
 8005956:	441a      	add	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f7fe f8e7 	bl	8003b32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005964:	2301      	movs	r3, #1
 8005966:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005968:	697b      	ldr	r3, [r7, #20]
	}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	200006e8 	.word	0x200006e8
 8005978:	20000bc4 	.word	0x20000bc4
 800597c:	200006ec 	.word	0x200006ec

08005980 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d06a      	beq.n	8005a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	60fb      	str	r3, [r7, #12]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d902      	bls.n	80059c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	e002      	b.n	80059cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d04b      	beq.n	8005a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d146      	bne.n	8005a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10a      	bne.n	8005a00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	60bb      	str	r3, [r7, #8]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	db04      	blt.n	8005a1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	6959      	ldr	r1, [r3, #20]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4a13      	ldr	r2, [pc, #76]	; (8005a7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	4299      	cmp	r1, r3
 8005a32:	d11c      	bne.n	8005a6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe f8d7 	bl	8003bec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d903      	bls.n	8005a52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a60:	441a      	add	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f7fe f862 	bl	8003b32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a6e:	bf00      	nop
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	200006e8 	.word	0x200006e8
 8005a7c:	200006ec 	.word	0x200006ec
 8005a80:	20000bc4 	.word	0x20000bc4

08005a84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a88:	4b07      	ldr	r3, [pc, #28]	; (8005aa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a96:	3201      	adds	r2, #1
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005a9a:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
	}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	200006e8 	.word	0x200006e8

08005aac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005abc:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe f892 	bl	8003bec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ace:	d10a      	bne.n	8005ae6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4819      	ldr	r0, [pc, #100]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ae0:	f7fe f827 	bl	8003b32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ae4:	e026      	b.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d209      	bcs.n	8005b12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe f835 	bl	8003b7a <vListInsert>
}
 8005b10:	e010      	b.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b12:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe f82b 	bl	8003b7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d202      	bcs.n	8005b34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b2e:	4a08      	ldr	r2, [pc, #32]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6013      	str	r3, [r2, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	20000bc0 	.word	0x20000bc0
 8005b40:	200006e8 	.word	0x200006e8
 8005b44:	20000ba8 	.word	0x20000ba8
 8005b48:	20000b78 	.word	0x20000b78
 8005b4c:	20000b74 	.word	0x20000b74
 8005b50:	20000bdc 	.word	0x20000bdc

08005b54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b5e:	f000 fb07 	bl	8006170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <xTimerCreateTimerTask+0x80>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d021      	beq.n	8005bae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b72:	1d3a      	adds	r2, r7, #4
 8005b74:	f107 0108 	add.w	r1, r7, #8
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fd ff91 	bl	8003aa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	9202      	str	r2, [sp, #8]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	2300      	movs	r3, #0
 8005b92:	460a      	mov	r2, r1
 8005b94:	4910      	ldr	r1, [pc, #64]	; (8005bd8 <xTimerCreateTimerTask+0x84>)
 8005b96:	4811      	ldr	r0, [pc, #68]	; (8005bdc <xTimerCreateTimerTask+0x88>)
 8005b98:	f7fe ff52 	bl	8004a40 <xTaskCreateStatic>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	4a10      	ldr	r2, [pc, #64]	; (8005be0 <xTimerCreateTimerTask+0x8c>)
 8005ba0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <xTimerCreateTimerTask+0x8c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005baa:	2301      	movs	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	613b      	str	r3, [r7, #16]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bca:	697b      	ldr	r3, [r7, #20]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000c18 	.word	0x20000c18
 8005bd8:	08006b30 	.word	0x08006b30
 8005bdc:	08005d19 	.word	0x08005d19
 8005be0:	20000c1c 	.word	0x20000c1c

08005be4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	623b      	str	r3, [r7, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02a      	beq.n	8005c70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b05      	cmp	r3, #5
 8005c2a:	dc18      	bgt.n	8005c5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c2c:	f7ff fdb4 	bl	8005798 <xTaskGetSchedulerState>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d109      	bne.n	8005c4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c36:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f107 0110 	add.w	r1, r7, #16
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c42:	f7fe f9f1 	bl	8004028 <xQueueGenericSend>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24
 8005c48:	e012      	b.n	8005c70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	f107 0110 	add.w	r1, r7, #16
 8005c52:	2300      	movs	r3, #0
 8005c54:	2200      	movs	r2, #0
 8005c56:	f7fe f9e7 	bl	8004028 <xQueueGenericSend>
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c5c:	e008      	b.n	8005c70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <xTimerGenericCommand+0x98>)
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	f107 0110 	add.w	r1, r7, #16
 8005c66:	2300      	movs	r3, #0
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	f7fe fadb 	bl	8004224 <xQueueGenericSendFromISR>
 8005c6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3728      	adds	r7, #40	; 0x28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000c18 	.word	0x20000c18

08005c80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8a:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <prvProcessExpiredTimer+0x94>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fd ffa7 	bl	8003bec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d022      	beq.n	8005cf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	699a      	ldr	r2, [r3, #24]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	18d1      	adds	r1, r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	6978      	ldr	r0, [r7, #20]
 8005cba:	f000 f8d1 	bl	8005e60 <prvInsertTimerInActiveList>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01f      	beq.n	8005d04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	2100      	movs	r1, #0
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7ff ff88 	bl	8005be4 <xTimerGenericCommand>
 8005cd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d113      	bne.n	8005d04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60fb      	str	r3, [r7, #12]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf8:	f023 0301 	bic.w	r3, r3, #1
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	6978      	ldr	r0, [r7, #20]
 8005d0a:	4798      	blx	r3
}
 8005d0c:	bf00      	nop
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000c10 	.word	0x20000c10

08005d18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d20:	f107 0308 	add.w	r3, r7, #8
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f857 	bl	8005dd8 <prvGetNextExpireTime>
 8005d2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f803 	bl	8005d3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d36:	f000 f8d5 	bl	8005ee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d3a:	e7f1      	b.n	8005d20 <prvTimerTask+0x8>

08005d3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d46:	f7ff f935 	bl	8004fb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f866 	bl	8005e20 <prvSampleTimeNow>
 8005d54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d130      	bne.n	8005dbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <prvProcessTimerOrBlockTask+0x3c>
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d806      	bhi.n	8005d78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d6a:	f7ff f931 	bl	8004fd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ff85 	bl	8005c80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d76:	e024      	b.n	8005dc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <prvProcessTimerOrBlockTask+0x90>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <prvProcessTimerOrBlockTask+0x50>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <prvProcessTimerOrBlockTask+0x52>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <prvProcessTimerOrBlockTask+0x94>)
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	f7fe fe1b 	bl	80049d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005da2:	f7ff f915 	bl	8004fd0 <xTaskResumeAll>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dac:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <prvProcessTimerOrBlockTask+0x98>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
}
 8005dbc:	e001      	b.n	8005dc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dbe:	f7ff f907 	bl	8004fd0 <xTaskResumeAll>
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000c14 	.word	0x20000c14
 8005dd0:	20000c18 	.word	0x20000c18
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005de0:	4b0e      	ldr	r3, [pc, #56]	; (8005e1c <prvGetNextExpireTime+0x44>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <prvGetNextExpireTime+0x16>
 8005dea:	2201      	movs	r2, #1
 8005dec:	e000      	b.n	8005df0 <prvGetNextExpireTime+0x18>
 8005dee:	2200      	movs	r2, #0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dfc:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <prvGetNextExpireTime+0x44>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e001      	b.n	8005e0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20000c10 	.word	0x20000c10

08005e20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e28:	f7ff f970 	bl	800510c <xTaskGetTickCount>
 8005e2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <prvSampleTimeNow+0x3c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d205      	bcs.n	8005e44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e38:	f000 f936 	bl	80060a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e4a:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <prvSampleTimeNow+0x3c>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e50:	68fb      	ldr	r3, [r7, #12]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000c20 	.word	0x20000c20

08005e60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d812      	bhi.n	8005eac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e01b      	b.n	8005ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <prvInsertTimerInActiveList+0x7c>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fd fe68 	bl	8003b7a <vListInsert>
 8005eaa:	e012      	b.n	8005ed2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d206      	bcs.n	8005ec2 <prvInsertTimerInActiveList+0x62>
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d302      	bcc.n	8005ec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e007      	b.n	8005ed2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <prvInsertTimerInActiveList+0x80>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fd fe54 	bl	8003b7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000c14 	.word	0x20000c14
 8005ee0:	20000c10 	.word	0x20000c10

08005ee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08e      	sub	sp, #56	; 0x38
 8005ee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eea:	e0ca      	b.n	8006082 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da18      	bge.n	8005f24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ef2:	1d3b      	adds	r3, r7, #4
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	61fb      	str	r3, [r7, #28]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1a:	6850      	ldr	r0, [r2, #4]
 8005f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1e:	6892      	ldr	r2, [r2, #8]
 8005f20:	4611      	mov	r1, r2
 8005f22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f2c0 80aa 	blt.w	8006080 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fd fe55 	bl	8003bec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f42:	463b      	mov	r3, r7
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff ff6b 	bl	8005e20 <prvSampleTimeNow>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	f200 8097 	bhi.w	8006082 <prvProcessReceivedCommands+0x19e>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <prvProcessReceivedCommands+0x78>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f85 	.word	0x08005f85
 8005f68:	08005ff9 	.word	0x08005ff9
 8005f6c:	0800600d 	.word	0x0800600d
 8005f70:	08006057 	.word	0x08006057
 8005f74:	08005f85 	.word	0x08005f85
 8005f78:	08005f85 	.word	0x08005f85
 8005f7c:	08005ff9 	.word	0x08005ff9
 8005f80:	0800600d 	.word	0x0800600d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	18d1      	adds	r1, r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa4:	f7ff ff5c 	bl	8005e60 <prvInsertTimerInActiveList>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d069      	beq.n	8006082 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05e      	beq.n	8006082 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	441a      	add	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd6:	f7ff fe05 	bl	8005be4 <xTimerGenericCommand>
 8005fda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d14f      	bne.n	8006082 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	61bb      	str	r3, [r7, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800600a:	e03a      	b.n	8006082 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	617b      	str	r3, [r7, #20]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	18d1      	adds	r1, r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006050:	f7ff ff06 	bl	8005e60 <prvInsertTimerInActiveList>
					break;
 8006054:	e015      	b.n	8006082 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f000 fbdb 	bl	8006820 <vPortFree>
 800606a:	e00a      	b.n	8006082 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800607e:	e000      	b.n	8006082 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006082:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <prvProcessReceivedCommands+0x1c0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1d39      	adds	r1, r7, #4
 8006088:	2200      	movs	r2, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe f966 	bl	800435c <xQueueReceive>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f af2a 	bne.w	8005eec <prvProcessReceivedCommands+0x8>
	}
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	3730      	adds	r7, #48	; 0x30
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000c18 	.word	0x20000c18

080060a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ae:	e048      	b.n	8006142 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b0:	4b2d      	ldr	r3, [pc, #180]	; (8006168 <prvSwitchTimerLists+0xc0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ba:	4b2b      	ldr	r3, [pc, #172]	; (8006168 <prvSwitchTimerLists+0xc0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd fd8f 	bl	8003bec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02e      	beq.n	8006142 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d90e      	bls.n	8006114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006102:	4b19      	ldr	r3, [pc, #100]	; (8006168 <prvSwitchTimerLists+0xc0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fd fd34 	bl	8003b7a <vListInsert>
 8006112:	e016      	b.n	8006142 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006114:	2300      	movs	r3, #0
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	2100      	movs	r1, #0
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fd60 	bl	8005be4 <xTimerGenericCommand>
 8006124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	603b      	str	r3, [r7, #0]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006142:	4b09      	ldr	r3, [pc, #36]	; (8006168 <prvSwitchTimerLists+0xc0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1b1      	bne.n	80060b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800614c:	4b06      	ldr	r3, [pc, #24]	; (8006168 <prvSwitchTimerLists+0xc0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <prvSwitchTimerLists+0xc4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a04      	ldr	r2, [pc, #16]	; (8006168 <prvSwitchTimerLists+0xc0>)
 8006158:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800615a:	4a04      	ldr	r2, [pc, #16]	; (800616c <prvSwitchTimerLists+0xc4>)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	6013      	str	r3, [r2, #0]
}
 8006160:	bf00      	nop
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000c10 	.word	0x20000c10
 800616c:	20000c14 	.word	0x20000c14

08006170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006176:	f000 f965 	bl	8006444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d120      	bne.n	80061c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006182:	4814      	ldr	r0, [pc, #80]	; (80061d4 <prvCheckForValidListAndQueue+0x64>)
 8006184:	f7fd fca8 	bl	8003ad8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006188:	4813      	ldr	r0, [pc, #76]	; (80061d8 <prvCheckForValidListAndQueue+0x68>)
 800618a:	f7fd fca5 	bl	8003ad8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <prvCheckForValidListAndQueue+0x6c>)
 8006190:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <prvCheckForValidListAndQueue+0x64>)
 8006192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <prvCheckForValidListAndQueue+0x70>)
 8006196:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <prvCheckForValidListAndQueue+0x68>)
 8006198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800619a:	2300      	movs	r3, #0
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <prvCheckForValidListAndQueue+0x74>)
 80061a0:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <prvCheckForValidListAndQueue+0x78>)
 80061a2:	2110      	movs	r1, #16
 80061a4:	200a      	movs	r0, #10
 80061a6:	f7fd fdb3 	bl	8003d10 <xQueueGenericCreateStatic>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4a08      	ldr	r2, [pc, #32]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 80061ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061b8:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <prvCheckForValidListAndQueue+0x60>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	490b      	ldr	r1, [pc, #44]	; (80061ec <prvCheckForValidListAndQueue+0x7c>)
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fbe0 	bl	8004984 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c4:	f000 f96e 	bl	80064a4 <vPortExitCritical>
}
 80061c8:	bf00      	nop
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000c18 	.word	0x20000c18
 80061d4:	20000be8 	.word	0x20000be8
 80061d8:	20000bfc 	.word	0x20000bfc
 80061dc:	20000c10 	.word	0x20000c10
 80061e0:	20000c14 	.word	0x20000c14
 80061e4:	20000cc4 	.word	0x20000cc4
 80061e8:	20000c24 	.word	0x20000c24
 80061ec:	08006b38 	.word	0x08006b38

080061f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3b04      	subs	r3, #4
 8006200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b04      	subs	r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0201 	bic.w	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3b04      	subs	r3, #4
 800621e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006220:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <pxPortInitialiseStack+0x64>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b14      	subs	r3, #20
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b04      	subs	r3, #4
 8006236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f06f 0202 	mvn.w	r2, #2
 800623e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b20      	subs	r3, #32
 8006244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	08006259 	.word	0x08006259

08006258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800625e:	2300      	movs	r3, #0
 8006260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <prvTaskExitError+0x54>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626a:	d00a      	beq.n	8006282 <prvTaskExitError+0x2a>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	60fb      	str	r3, [r7, #12]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <prvTaskExitError+0x28>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60bb      	str	r3, [r7, #8]
}
 8006294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006296:	bf00      	nop
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0fc      	beq.n	8006298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800629e:	bf00      	nop
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	2000000c 	.word	0x2000000c

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062d8:	4808      	ldr	r0, [pc, #32]	; (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062fa:	bf00      	nop
 80062fc:	e000ed08 	.word	0xe000ed08

08006300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006306:	4b46      	ldr	r3, [pc, #280]	; (8006420 <xPortStartScheduler+0x120>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a46      	ldr	r2, [pc, #280]	; (8006424 <xPortStartScheduler+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10a      	bne.n	8006326 <xPortStartScheduler+0x26>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006326:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3f      	ldr	r2, [pc, #252]	; (8006428 <xPortStartScheduler+0x128>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x46>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006346:	4b39      	ldr	r3, [pc, #228]	; (800642c <xPortStartScheduler+0x12c>)
 8006348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b31      	ldr	r3, [pc, #196]	; (8006430 <xPortStartScheduler+0x130>)
 800636c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800636e:	4b31      	ldr	r3, [pc, #196]	; (8006434 <xPortStartScheduler+0x134>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006374:	e009      	b.n	800638a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006376:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <xPortStartScheduler+0x134>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3b01      	subs	r3, #1
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <xPortStartScheduler+0x134>)
 800637e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d0ef      	beq.n	8006376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006396:	4b27      	ldr	r3, [pc, #156]	; (8006434 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1c3 0307 	rsb	r3, r3, #7
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00a      	beq.n	80063b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <xPortStartScheduler+0x134>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <xPortStartScheduler+0x134>)
 80063c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <xPortStartScheduler+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <xPortStartScheduler+0x134>)
 80063cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <xPortStartScheduler+0x138>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <xPortStartScheduler+0x138>)
 80063dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <xPortStartScheduler+0x138>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <xPortStartScheduler+0x138>)
 80063e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ee:	f000 f8dd 	bl	80065ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <xPortStartScheduler+0x13c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063f8:	f000 f8fc 	bl	80065f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xPortStartScheduler+0x140>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0f      	ldr	r2, [pc, #60]	; (8006440 <xPortStartScheduler+0x140>)
 8006402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006408:	f7ff ff66 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800640c:	f7fe ff48 	bl	80052a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006410:	f7ff ff22 	bl	8006258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	410fc271 	.word	0x410fc271
 8006428:	410fc270 	.word	0x410fc270
 800642c:	e000e400 	.word	0xe000e400
 8006430:	20000d14 	.word	0x20000d14
 8006434:	20000d18 	.word	0x20000d18
 8006438:	e000ed20 	.word	0xe000ed20
 800643c:	2000000c 	.word	0x2000000c
 8006440:	e000ef34 	.word	0xe000ef34

08006444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <vPortEnterCritical+0x58>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a0d      	ldr	r2, [pc, #52]	; (800649c <vPortEnterCritical+0x58>)
 8006466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <vPortEnterCritical+0x58>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10f      	bne.n	8006490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortEnterCritical+0x5c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <vPortEnterCritical+0x4c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vPortEnterCritical+0x4a>
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	2000000c 	.word	0x2000000c
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <vPortExitCritical+0x50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <vPortExitCritical+0x24>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	607b      	str	r3, [r7, #4]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <vPortExitCritical+0x50>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <vPortExitCritical+0x50>)
 80064d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <vPortExitCritical+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <vPortExitCritical+0x42>
 80064da:	2300      	movs	r3, #0
 80064dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	f383 8811 	msr	BASEPRI, r3
}
 80064e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	2000000c 	.word	0x2000000c
	...

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7fe feb6 	bl	80052a0 <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006582:	f7fe fdd3 	bl	800512c <xTaskIncrementTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <xPortSysTickHandler+0x40>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <vPortSetupTimerInterrupt+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <vPortSetupTimerInterrupt+0x3c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <vPortSetupTimerInterrupt+0x40>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <vPortSetupTimerInterrupt+0x44>)
 80065ca:	3b01      	subs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ce:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010
 80065e4:	e000e018 	.word	0xe000e018
 80065e8:	20000000 	.word	0x20000000
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	e000e014 	.word	0xe000e014

080065f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006604 <vPortEnableVFP+0x10>
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065fe:	6001      	str	r1, [r0, #0]
 8006600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006602:	bf00      	nop
 8006604:	e000ed88 	.word	0xe000ed88

08006608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d914      	bls.n	8006644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <vPortValidateInterruptPriority+0x70>)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006624:	4b15      	ldr	r3, [pc, #84]	; (800667c <vPortValidateInterruptPriority+0x74>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	7afa      	ldrb	r2, [r7, #11]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20a      	bcs.n	8006644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <vPortValidateInterruptPriority+0x78>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <vPortValidateInterruptPriority+0x7c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d90a      	bls.n	800666a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	603b      	str	r3, [r7, #0]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <vPortValidateInterruptPriority+0x60>
	}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	e000e3f0 	.word	0xe000e3f0
 800667c:	20000d14 	.word	0x20000d14
 8006680:	e000ed0c 	.word	0xe000ed0c
 8006684:	20000d18 	.word	0x20000d18

08006688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006694:	f7fe fc8e 	bl	8004fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <pvPortMalloc+0x180>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066a0:	f000 f920 	bl	80068e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066a4:	4b59      	ldr	r3, [pc, #356]	; (800680c <pvPortMalloc+0x184>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8093 	bne.w	80067d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01d      	beq.n	80066f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066b8:	2208      	movs	r2, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f023 0307 	bic.w	r3, r3, #7
 80066d0:	3308      	adds	r3, #8
 80066d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <pvPortMalloc+0x6c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	617b      	str	r3, [r7, #20]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d06e      	beq.n	80067d8 <pvPortMalloc+0x150>
 80066fa:	4b45      	ldr	r3, [pc, #276]	; (8006810 <pvPortMalloc+0x188>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d869      	bhi.n	80067d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006704:	4b43      	ldr	r3, [pc, #268]	; (8006814 <pvPortMalloc+0x18c>)
 8006706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006708:	4b42      	ldr	r3, [pc, #264]	; (8006814 <pvPortMalloc+0x18c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800670e:	e004      	b.n	800671a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d903      	bls.n	800672c <pvPortMalloc+0xa4>
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f1      	bne.n	8006710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <pvPortMalloc+0x180>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	429a      	cmp	r2, r3
 8006734:	d050      	beq.n	80067d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2208      	movs	r2, #8
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	2308      	movs	r3, #8
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	429a      	cmp	r2, r3
 8006756:	d91f      	bls.n	8006798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <pvPortMalloc+0xf8>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	613b      	str	r3, [r7, #16]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006792:	69b8      	ldr	r0, [r7, #24]
 8006794:	f000 f908 	bl	80069a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <pvPortMalloc+0x188>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <pvPortMalloc+0x188>)
 80067a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <pvPortMalloc+0x188>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <pvPortMalloc+0x190>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d203      	bcs.n	80067ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <pvPortMalloc+0x188>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <pvPortMalloc+0x190>)
 80067b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <pvPortMalloc+0x184>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <pvPortMalloc+0x194>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a11      	ldr	r2, [pc, #68]	; (800681c <pvPortMalloc+0x194>)
 80067d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067d8:	f7fe fbfa 	bl	8004fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <pvPortMalloc+0x174>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <pvPortMalloc+0x172>
	return pvReturn;
 80067fc:	69fb      	ldr	r3, [r7, #28]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20001cc4 	.word	0x20001cc4
 800680c:	20001cd8 	.word	0x20001cd8
 8006810:	20001cc8 	.word	0x20001cc8
 8006814:	20001cbc 	.word	0x20001cbc
 8006818:	20001ccc 	.word	0x20001ccc
 800681c:	20001cd0 	.word	0x20001cd0

08006820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d04d      	beq.n	80068ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006832:	2308      	movs	r3, #8
 8006834:	425b      	negs	r3, r3
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <vPortFree+0xb8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4013      	ands	r3, r2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <vPortFree+0x44>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <vPortFree+0x62>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60bb      	str	r3, [r7, #8]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <vPortFree+0xb8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11a      	bne.n	80068ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <vPortFree+0xb8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	401a      	ands	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068a8:	f7fe fb84 	bl	8004fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <vPortFree+0xbc>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	4a09      	ldr	r2, [pc, #36]	; (80068dc <vPortFree+0xbc>)
 80068b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ba:	6938      	ldr	r0, [r7, #16]
 80068bc:	f000 f874 	bl	80069a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <vPortFree+0xc0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vPortFree+0xc0>)
 80068c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ca:	f7fe fb81 	bl	8004fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20001cd8 	.word	0x20001cd8
 80068dc:	20001cc8 	.word	0x20001cc8
 80068e0:	20001cd4 	.word	0x20001cd4

080068e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ea:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80068ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvHeapInit+0xac>)
 80068f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3307      	adds	r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <prvHeapInit+0xac>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <prvHeapInit+0xb0>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <prvHeapInit+0xb0>)
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006930:	2208      	movs	r2, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvHeapInit+0xb4>)
 8006944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <prvHeapInit+0xb4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <prvHeapInit+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvHeapInit+0xb4>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <prvHeapInit+0xb8>)
 8006972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvHeapInit+0xbc>)
 800697a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <prvHeapInit+0xc0>)
 800697e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000d1c 	.word	0x20000d1c
 8006994:	20001cbc 	.word	0x20001cbc
 8006998:	20001cc4 	.word	0x20001cc4
 800699c:	20001ccc 	.word	0x20001ccc
 80069a0:	20001cc8 	.word	0x20001cc8
 80069a4:	20001cd8 	.word	0x20001cd8

080069a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <prvInsertBlockIntoFreeList+0xac>)
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e002      	b.n	80069bc <prvInsertBlockIntoFreeList+0x14>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d8f7      	bhi.n	80069b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d108      	bne.n	80069ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d118      	bne.n	8006a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d00d      	beq.n	8006a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e003      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d002      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20001cbc 	.word	0x20001cbc
 8006a58:	20001cc4 	.word	0x20001cc4

08006a5c <__libc_init_array>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4d0d      	ldr	r5, [pc, #52]	; (8006a94 <__libc_init_array+0x38>)
 8006a60:	4c0d      	ldr	r4, [pc, #52]	; (8006a98 <__libc_init_array+0x3c>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	2600      	movs	r6, #0
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	d109      	bne.n	8006a80 <__libc_init_array+0x24>
 8006a6c:	4d0b      	ldr	r5, [pc, #44]	; (8006a9c <__libc_init_array+0x40>)
 8006a6e:	4c0c      	ldr	r4, [pc, #48]	; (8006aa0 <__libc_init_array+0x44>)
 8006a70:	f000 f82e 	bl	8006ad0 <_init>
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	2600      	movs	r6, #0
 8006a7a:	42a6      	cmp	r6, r4
 8006a7c:	d105      	bne.n	8006a8a <__libc_init_array+0x2e>
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a84:	4798      	blx	r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7ee      	b.n	8006a68 <__libc_init_array+0xc>
 8006a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8e:	4798      	blx	r3
 8006a90:	3601      	adds	r6, #1
 8006a92:	e7f2      	b.n	8006a7a <__libc_init_array+0x1e>
 8006a94:	08006c30 	.word	0x08006c30
 8006a98:	08006c30 	.word	0x08006c30
 8006a9c:	08006c30 	.word	0x08006c30
 8006aa0:	08006c34 	.word	0x08006c34

08006aa4 <memcpy>:
 8006aa4:	440a      	add	r2, r1
 8006aa6:	4291      	cmp	r1, r2
 8006aa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006aac:	d100      	bne.n	8006ab0 <memcpy+0xc>
 8006aae:	4770      	bx	lr
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aba:	4291      	cmp	r1, r2
 8006abc:	d1f9      	bne.n	8006ab2 <memcpy+0xe>
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <memset>:
 8006ac0:	4402      	add	r2, r0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d100      	bne.n	8006aca <memset+0xa>
 8006ac8:	4770      	bx	lr
 8006aca:	f803 1b01 	strb.w	r1, [r3], #1
 8006ace:	e7f9      	b.n	8006ac4 <memset+0x4>

08006ad0 <_init>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr

08006adc <_fini>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	bf00      	nop
 8006ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae2:	bc08      	pop	{r3}
 8006ae4:	469e      	mov	lr, r3
 8006ae6:	4770      	bx	lr
